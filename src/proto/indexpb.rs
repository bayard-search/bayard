// This file is generated by rust-protobuf 2.8.0. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `indexpb.proto`

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_8_0;

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\rindexpb.proto\x12\x07indexpb\x1a\x10indexrpcpb.proto\x1a\reraftpb.pr\
    oto2\x94\x03\n\x05Index\x122\n\x03Get\x12\x14.indexrpcpb.IndexReq\x1a\
    \x13.indexrpcpb.GetResp\"\0\x122\n\x03Put\x12\x14.indexrpcpb.IndexReq\
    \x1a\x13.indexrpcpb.PutResp\"\0\x128\n\x06Delete\x12\x14.indexrpcpb.Inde\
    xReq\x1a\x16.indexrpcpb.DeleteResp\"\0\x128\n\x06Search\x12\x14.indexrpc\
    pb.IndexReq\x1a\x16.indexrpcpb.SearchResp\"\0\x120\n\x04Raft\x12\x10.era\
    ftpb.Message\x1a\x14.indexrpcpb.RaftDone\"\0\x12C\n\x0eRaftConfChange\
    \x12\x19.indexrpcpb.ConfChangeReq\x1a\x14.indexrpcpb.RaftDone\"\0\x128\n\
    \x06Status\x12\x14.indexrpcpb.IndexReq\x1a\x16.indexrpcpb.StatusResp\"\0\
    J\xd2\x03\n\x06\x12\x04\0\0\x15\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\
    \x08\n\x01\x02\x12\x03\x01\0\x10\n\t\n\x02\x03\0\x12\x03\x03\0\x1a\n\t\n\
    \x02\x03\x01\x12\x03\x04\0\x17\n\n\n\x02\x06\0\x12\x04\x06\0\x15\x01\n\n\
    \n\x03\x06\0\x01\x12\x03\x06\x08\r\n\x0c\n\x04\x06\0\x02\0\x12\x04\x07\
    \x04\x08\x05\n\x0c\n\x05\x06\0\x02\0\x01\x12\x03\x07\x08\x0b\n\x0c\n\x05\
    \x06\0\x02\0\x02\x12\x03\x07\r\x20\n\x0c\n\x05\x06\0\x02\0\x03\x12\x03\
    \x07+=\n\x0c\n\x04\x06\0\x02\x01\x12\x04\t\x04\n\x05\n\x0c\n\x05\x06\0\
    \x02\x01\x01\x12\x03\t\x08\x0b\n\x0c\n\x05\x06\0\x02\x01\x02\x12\x03\t\r\
    \x20\n\x0c\n\x05\x06\0\x02\x01\x03\x12\x03\t+=\n\x0c\n\x04\x06\0\x02\x02\
    \x12\x04\x0b\x04\x0c\x05\n\x0c\n\x05\x06\0\x02\x02\x01\x12\x03\x0b\x08\
    \x0e\n\x0c\n\x05\x06\0\x02\x02\x02\x12\x03\x0b\x10#\n\x0c\n\x05\x06\0\
    \x02\x02\x03\x12\x03\x0b.C\n\x0c\n\x04\x06\0\x02\x03\x12\x04\r\x04\x0e\
    \x05\n\x0c\n\x05\x06\0\x02\x03\x01\x12\x03\r\x08\x0e\n\x0c\n\x05\x06\0\
    \x02\x03\x02\x12\x03\r\x10#\n\x0c\n\x05\x06\0\x02\x03\x03\x12\x03\r.C\n\
    \x0c\n\x04\x06\0\x02\x04\x12\x04\x0f\x04\x10\x05\n\x0c\n\x05\x06\0\x02\
    \x04\x01\x12\x03\x0f\x08\x0c\n\x0c\n\x05\x06\0\x02\x04\x02\x12\x03\x0f\
    \x0e\x1d\n\x0c\n\x05\x06\0\x02\x04\x03\x12\x03\x0f(;\n\x0c\n\x04\x06\0\
    \x02\x05\x12\x04\x11\x04\x12\x05\n\x0c\n\x05\x06\0\x02\x05\x01\x12\x03\
    \x11\x08\x16\n\x0c\n\x05\x06\0\x02\x05\x02\x12\x03\x11\x180\n\x0c\n\x05\
    \x06\0\x02\x05\x03\x12\x03\x11;N\n\x0c\n\x04\x06\0\x02\x06\x12\x04\x13\
    \x04\x14\x05\n\x0c\n\x05\x06\0\x02\x06\x01\x12\x03\x13\x08\x0e\n\x0c\n\
    \x05\x06\0\x02\x06\x02\x12\x03\x13\x10#\n\x0c\n\x05\x06\0\x02\x06\x03\
    \x12\x03\x13.Cb\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
