// This file is generated by rust-protobuf 2.8.0. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `indexrpcpb.proto`

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_8_0;

#[derive(PartialEq,Clone,Default)]
pub struct ApplyReq {
    // message fields
    pub client_id: u64,
    pub req_type: ReqType,
    pub join_req: ::protobuf::SingularPtrField<JoinReq>,
    pub leave_req: ::protobuf::SingularPtrField<LeaveReq>,
    pub put_req: ::protobuf::SingularPtrField<PutReq>,
    pub delete_req: ::protobuf::SingularPtrField<DeleteReq>,
    pub commit_req: ::protobuf::SingularPtrField<CommitReq>,
    pub rollback_req: ::protobuf::SingularPtrField<RollbackReq>,
    pub merge_req: ::protobuf::SingularPtrField<MergeReq>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ApplyReq {
    fn default() -> &'a ApplyReq {
        <ApplyReq as ::protobuf::Message>::default_instance()
    }
}

impl ApplyReq {
    pub fn new() -> ApplyReq {
        ::std::default::Default::default()
    }

    // uint64 client_id = 1;


    pub fn get_client_id(&self) -> u64 {
        self.client_id
    }
    pub fn clear_client_id(&mut self) {
        self.client_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_client_id(&mut self, v: u64) {
        self.client_id = v;
    }

    // .indexrpcpb.ReqType req_type = 2;


    pub fn get_req_type(&self) -> ReqType {
        self.req_type
    }
    pub fn clear_req_type(&mut self) {
        self.req_type = ReqType::Join;
    }

    // Param is passed by value, moved
    pub fn set_req_type(&mut self, v: ReqType) {
        self.req_type = v;
    }

    // .indexrpcpb.JoinReq join_req = 3;


    pub fn get_join_req(&self) -> &JoinReq {
        self.join_req.as_ref().unwrap_or_else(|| JoinReq::default_instance())
    }
    pub fn clear_join_req(&mut self) {
        self.join_req.clear();
    }

    pub fn has_join_req(&self) -> bool {
        self.join_req.is_some()
    }

    // Param is passed by value, moved
    pub fn set_join_req(&mut self, v: JoinReq) {
        self.join_req = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_join_req(&mut self) -> &mut JoinReq {
        if self.join_req.is_none() {
            self.join_req.set_default();
        }
        self.join_req.as_mut().unwrap()
    }

    // Take field
    pub fn take_join_req(&mut self) -> JoinReq {
        self.join_req.take().unwrap_or_else(|| JoinReq::new())
    }

    // .indexrpcpb.LeaveReq leave_req = 4;


    pub fn get_leave_req(&self) -> &LeaveReq {
        self.leave_req.as_ref().unwrap_or_else(|| LeaveReq::default_instance())
    }
    pub fn clear_leave_req(&mut self) {
        self.leave_req.clear();
    }

    pub fn has_leave_req(&self) -> bool {
        self.leave_req.is_some()
    }

    // Param is passed by value, moved
    pub fn set_leave_req(&mut self, v: LeaveReq) {
        self.leave_req = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_leave_req(&mut self) -> &mut LeaveReq {
        if self.leave_req.is_none() {
            self.leave_req.set_default();
        }
        self.leave_req.as_mut().unwrap()
    }

    // Take field
    pub fn take_leave_req(&mut self) -> LeaveReq {
        self.leave_req.take().unwrap_or_else(|| LeaveReq::new())
    }

    // .indexrpcpb.PutReq put_req = 5;


    pub fn get_put_req(&self) -> &PutReq {
        self.put_req.as_ref().unwrap_or_else(|| PutReq::default_instance())
    }
    pub fn clear_put_req(&mut self) {
        self.put_req.clear();
    }

    pub fn has_put_req(&self) -> bool {
        self.put_req.is_some()
    }

    // Param is passed by value, moved
    pub fn set_put_req(&mut self, v: PutReq) {
        self.put_req = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_put_req(&mut self) -> &mut PutReq {
        if self.put_req.is_none() {
            self.put_req.set_default();
        }
        self.put_req.as_mut().unwrap()
    }

    // Take field
    pub fn take_put_req(&mut self) -> PutReq {
        self.put_req.take().unwrap_or_else(|| PutReq::new())
    }

    // .indexrpcpb.DeleteReq delete_req = 6;


    pub fn get_delete_req(&self) -> &DeleteReq {
        self.delete_req.as_ref().unwrap_or_else(|| DeleteReq::default_instance())
    }
    pub fn clear_delete_req(&mut self) {
        self.delete_req.clear();
    }

    pub fn has_delete_req(&self) -> bool {
        self.delete_req.is_some()
    }

    // Param is passed by value, moved
    pub fn set_delete_req(&mut self, v: DeleteReq) {
        self.delete_req = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_delete_req(&mut self) -> &mut DeleteReq {
        if self.delete_req.is_none() {
            self.delete_req.set_default();
        }
        self.delete_req.as_mut().unwrap()
    }

    // Take field
    pub fn take_delete_req(&mut self) -> DeleteReq {
        self.delete_req.take().unwrap_or_else(|| DeleteReq::new())
    }

    // .indexrpcpb.CommitReq commit_req = 7;


    pub fn get_commit_req(&self) -> &CommitReq {
        self.commit_req.as_ref().unwrap_or_else(|| CommitReq::default_instance())
    }
    pub fn clear_commit_req(&mut self) {
        self.commit_req.clear();
    }

    pub fn has_commit_req(&self) -> bool {
        self.commit_req.is_some()
    }

    // Param is passed by value, moved
    pub fn set_commit_req(&mut self, v: CommitReq) {
        self.commit_req = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_commit_req(&mut self) -> &mut CommitReq {
        if self.commit_req.is_none() {
            self.commit_req.set_default();
        }
        self.commit_req.as_mut().unwrap()
    }

    // Take field
    pub fn take_commit_req(&mut self) -> CommitReq {
        self.commit_req.take().unwrap_or_else(|| CommitReq::new())
    }

    // .indexrpcpb.RollbackReq rollback_req = 8;


    pub fn get_rollback_req(&self) -> &RollbackReq {
        self.rollback_req.as_ref().unwrap_or_else(|| RollbackReq::default_instance())
    }
    pub fn clear_rollback_req(&mut self) {
        self.rollback_req.clear();
    }

    pub fn has_rollback_req(&self) -> bool {
        self.rollback_req.is_some()
    }

    // Param is passed by value, moved
    pub fn set_rollback_req(&mut self, v: RollbackReq) {
        self.rollback_req = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_rollback_req(&mut self) -> &mut RollbackReq {
        if self.rollback_req.is_none() {
            self.rollback_req.set_default();
        }
        self.rollback_req.as_mut().unwrap()
    }

    // Take field
    pub fn take_rollback_req(&mut self) -> RollbackReq {
        self.rollback_req.take().unwrap_or_else(|| RollbackReq::new())
    }

    // .indexrpcpb.MergeReq merge_req = 9;


    pub fn get_merge_req(&self) -> &MergeReq {
        self.merge_req.as_ref().unwrap_or_else(|| MergeReq::default_instance())
    }
    pub fn clear_merge_req(&mut self) {
        self.merge_req.clear();
    }

    pub fn has_merge_req(&self) -> bool {
        self.merge_req.is_some()
    }

    // Param is passed by value, moved
    pub fn set_merge_req(&mut self, v: MergeReq) {
        self.merge_req = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_merge_req(&mut self) -> &mut MergeReq {
        if self.merge_req.is_none() {
            self.merge_req.set_default();
        }
        self.merge_req.as_mut().unwrap()
    }

    // Take field
    pub fn take_merge_req(&mut self) -> MergeReq {
        self.merge_req.take().unwrap_or_else(|| MergeReq::new())
    }
}

impl ::protobuf::Message for ApplyReq {
    fn is_initialized(&self) -> bool {
        for v in &self.join_req {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.leave_req {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.put_req {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.delete_req {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.commit_req {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.rollback_req {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.merge_req {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.client_id = tmp;
                },
                2 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.req_type, 2, &mut self.unknown_fields)?
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.join_req)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.leave_req)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.put_req)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.delete_req)?;
                },
                7 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.commit_req)?;
                },
                8 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.rollback_req)?;
                },
                9 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.merge_req)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.client_id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.client_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.req_type != ReqType::Join {
            my_size += ::protobuf::rt::enum_size(2, self.req_type);
        }
        if let Some(ref v) = self.join_req.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.leave_req.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.put_req.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.delete_req.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.commit_req.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.rollback_req.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.merge_req.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.client_id != 0 {
            os.write_uint64(1, self.client_id)?;
        }
        if self.req_type != ReqType::Join {
            os.write_enum(2, self.req_type.value())?;
        }
        if let Some(ref v) = self.join_req.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.leave_req.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.put_req.as_ref() {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.delete_req.as_ref() {
            os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.commit_req.as_ref() {
            os.write_tag(7, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.rollback_req.as_ref() {
            os.write_tag(8, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.merge_req.as_ref() {
            os.write_tag(9, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ApplyReq {
        ApplyReq::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "client_id",
                    |m: &ApplyReq| { &m.client_id },
                    |m: &mut ApplyReq| { &mut m.client_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<ReqType>>(
                    "req_type",
                    |m: &ApplyReq| { &m.req_type },
                    |m: &mut ApplyReq| { &mut m.req_type },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<JoinReq>>(
                    "join_req",
                    |m: &ApplyReq| { &m.join_req },
                    |m: &mut ApplyReq| { &mut m.join_req },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<LeaveReq>>(
                    "leave_req",
                    |m: &ApplyReq| { &m.leave_req },
                    |m: &mut ApplyReq| { &mut m.leave_req },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<PutReq>>(
                    "put_req",
                    |m: &ApplyReq| { &m.put_req },
                    |m: &mut ApplyReq| { &mut m.put_req },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<DeleteReq>>(
                    "delete_req",
                    |m: &ApplyReq| { &m.delete_req },
                    |m: &mut ApplyReq| { &mut m.delete_req },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<CommitReq>>(
                    "commit_req",
                    |m: &ApplyReq| { &m.commit_req },
                    |m: &mut ApplyReq| { &mut m.commit_req },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<RollbackReq>>(
                    "rollback_req",
                    |m: &ApplyReq| { &m.rollback_req },
                    |m: &mut ApplyReq| { &mut m.rollback_req },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<MergeReq>>(
                    "merge_req",
                    |m: &ApplyReq| { &m.merge_req },
                    |m: &mut ApplyReq| { &mut m.merge_req },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ApplyReq>(
                    "ApplyReq",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ApplyReq {
        static mut instance: ::protobuf::lazy::Lazy<ApplyReq> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ApplyReq,
        };
        unsafe {
            instance.get(ApplyReq::new)
        }
    }
}

impl ::protobuf::Clear for ApplyReq {
    fn clear(&mut self) {
        self.client_id = 0;
        self.req_type = ReqType::Join;
        self.join_req.clear();
        self.leave_req.clear();
        self.put_req.clear();
        self.delete_req.clear();
        self.commit_req.clear();
        self.rollback_req.clear();
        self.merge_req.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ApplyReq {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ApplyReq {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ConfChangeReq {
    // message fields
    pub cc: ::protobuf::SingularPtrField<super::eraftpb::ConfChange>,
    pub ip: ::std::string::String,
    pub port: u32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ConfChangeReq {
    fn default() -> &'a ConfChangeReq {
        <ConfChangeReq as ::protobuf::Message>::default_instance()
    }
}

impl ConfChangeReq {
    pub fn new() -> ConfChangeReq {
        ::std::default::Default::default()
    }

    // .eraftpb.ConfChange cc = 1;


    pub fn get_cc(&self) -> &super::eraftpb::ConfChange {
        self.cc.as_ref().unwrap_or_else(|| super::eraftpb::ConfChange::default_instance())
    }
    pub fn clear_cc(&mut self) {
        self.cc.clear();
    }

    pub fn has_cc(&self) -> bool {
        self.cc.is_some()
    }

    // Param is passed by value, moved
    pub fn set_cc(&mut self, v: super::eraftpb::ConfChange) {
        self.cc = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cc(&mut self) -> &mut super::eraftpb::ConfChange {
        if self.cc.is_none() {
            self.cc.set_default();
        }
        self.cc.as_mut().unwrap()
    }

    // Take field
    pub fn take_cc(&mut self) -> super::eraftpb::ConfChange {
        self.cc.take().unwrap_or_else(|| super::eraftpb::ConfChange::new())
    }

    // string ip = 2;


    pub fn get_ip(&self) -> &str {
        &self.ip
    }
    pub fn clear_ip(&mut self) {
        self.ip.clear();
    }

    // Param is passed by value, moved
    pub fn set_ip(&mut self, v: ::std::string::String) {
        self.ip = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ip(&mut self) -> &mut ::std::string::String {
        &mut self.ip
    }

    // Take field
    pub fn take_ip(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.ip, ::std::string::String::new())
    }

    // uint32 port = 3;


    pub fn get_port(&self) -> u32 {
        self.port
    }
    pub fn clear_port(&mut self) {
        self.port = 0;
    }

    // Param is passed by value, moved
    pub fn set_port(&mut self, v: u32) {
        self.port = v;
    }
}

impl ::protobuf::Message for ConfChangeReq {
    fn is_initialized(&self) -> bool {
        for v in &self.cc {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.cc)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.ip)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.port = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.cc.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if !self.ip.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.ip);
        }
        if self.port != 0 {
            my_size += ::protobuf::rt::value_size(3, self.port, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.cc.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if !self.ip.is_empty() {
            os.write_string(2, &self.ip)?;
        }
        if self.port != 0 {
            os.write_uint32(3, self.port)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ConfChangeReq {
        ConfChangeReq::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::eraftpb::ConfChange>>(
                    "cc",
                    |m: &ConfChangeReq| { &m.cc },
                    |m: &mut ConfChangeReq| { &mut m.cc },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "ip",
                    |m: &ConfChangeReq| { &m.ip },
                    |m: &mut ConfChangeReq| { &mut m.ip },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "port",
                    |m: &ConfChangeReq| { &m.port },
                    |m: &mut ConfChangeReq| { &mut m.port },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ConfChangeReq>(
                    "ConfChangeReq",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ConfChangeReq {
        static mut instance: ::protobuf::lazy::Lazy<ConfChangeReq> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ConfChangeReq,
        };
        unsafe {
            instance.get(ConfChangeReq::new)
        }
    }
}

impl ::protobuf::Clear for ConfChangeReq {
    fn clear(&mut self) {
        self.cc.clear();
        self.ip.clear();
        self.port = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ConfChangeReq {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ConfChangeReq {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct RaftDone {
    // message fields
    pub err: RespErr,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RaftDone {
    fn default() -> &'a RaftDone {
        <RaftDone as ::protobuf::Message>::default_instance()
    }
}

impl RaftDone {
    pub fn new() -> RaftDone {
        ::std::default::Default::default()
    }

    // .indexrpcpb.RespErr err = 1;


    pub fn get_err(&self) -> RespErr {
        self.err
    }
    pub fn clear_err(&mut self) {
        self.err = RespErr::OK;
    }

    // Param is passed by value, moved
    pub fn set_err(&mut self, v: RespErr) {
        self.err = v;
    }
}

impl ::protobuf::Message for RaftDone {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.err, 1, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.err != RespErr::OK {
            my_size += ::protobuf::rt::enum_size(1, self.err);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.err != RespErr::OK {
            os.write_enum(1, self.err.value())?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RaftDone {
        RaftDone::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<RespErr>>(
                    "err",
                    |m: &RaftDone| { &m.err },
                    |m: &mut RaftDone| { &mut m.err },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<RaftDone>(
                    "RaftDone",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static RaftDone {
        static mut instance: ::protobuf::lazy::Lazy<RaftDone> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const RaftDone,
        };
        unsafe {
            instance.get(RaftDone::new)
        }
    }
}

impl ::protobuf::Clear for RaftDone {
    fn clear(&mut self) {
        self.err = RespErr::OK;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RaftDone {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RaftDone {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct JoinReq {
    // message fields
    pub client_id: u64,
    pub peer_id: u64,
    pub peer_addr: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a JoinReq {
    fn default() -> &'a JoinReq {
        <JoinReq as ::protobuf::Message>::default_instance()
    }
}

impl JoinReq {
    pub fn new() -> JoinReq {
        ::std::default::Default::default()
    }

    // uint64 client_id = 1;


    pub fn get_client_id(&self) -> u64 {
        self.client_id
    }
    pub fn clear_client_id(&mut self) {
        self.client_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_client_id(&mut self, v: u64) {
        self.client_id = v;
    }

    // uint64 peer_id = 2;


    pub fn get_peer_id(&self) -> u64 {
        self.peer_id
    }
    pub fn clear_peer_id(&mut self) {
        self.peer_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_peer_id(&mut self, v: u64) {
        self.peer_id = v;
    }

    // string peer_addr = 3;


    pub fn get_peer_addr(&self) -> &str {
        &self.peer_addr
    }
    pub fn clear_peer_addr(&mut self) {
        self.peer_addr.clear();
    }

    // Param is passed by value, moved
    pub fn set_peer_addr(&mut self, v: ::std::string::String) {
        self.peer_addr = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_peer_addr(&mut self) -> &mut ::std::string::String {
        &mut self.peer_addr
    }

    // Take field
    pub fn take_peer_addr(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.peer_addr, ::std::string::String::new())
    }
}

impl ::protobuf::Message for JoinReq {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.client_id = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.peer_id = tmp;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.peer_addr)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.client_id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.client_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.peer_id != 0 {
            my_size += ::protobuf::rt::value_size(2, self.peer_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.peer_addr.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.peer_addr);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.client_id != 0 {
            os.write_uint64(1, self.client_id)?;
        }
        if self.peer_id != 0 {
            os.write_uint64(2, self.peer_id)?;
        }
        if !self.peer_addr.is_empty() {
            os.write_string(3, &self.peer_addr)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> JoinReq {
        JoinReq::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "client_id",
                    |m: &JoinReq| { &m.client_id },
                    |m: &mut JoinReq| { &mut m.client_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "peer_id",
                    |m: &JoinReq| { &m.peer_id },
                    |m: &mut JoinReq| { &mut m.peer_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "peer_addr",
                    |m: &JoinReq| { &m.peer_addr },
                    |m: &mut JoinReq| { &mut m.peer_addr },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<JoinReq>(
                    "JoinReq",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static JoinReq {
        static mut instance: ::protobuf::lazy::Lazy<JoinReq> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const JoinReq,
        };
        unsafe {
            instance.get(JoinReq::new)
        }
    }
}

impl ::protobuf::Clear for JoinReq {
    fn clear(&mut self) {
        self.client_id = 0;
        self.peer_id = 0;
        self.peer_addr.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for JoinReq {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for JoinReq {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct LeaveReq {
    // message fields
    pub client_id: u64,
    pub peer_id: u64,
    pub peer_addr: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a LeaveReq {
    fn default() -> &'a LeaveReq {
        <LeaveReq as ::protobuf::Message>::default_instance()
    }
}

impl LeaveReq {
    pub fn new() -> LeaveReq {
        ::std::default::Default::default()
    }

    // uint64 client_id = 1;


    pub fn get_client_id(&self) -> u64 {
        self.client_id
    }
    pub fn clear_client_id(&mut self) {
        self.client_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_client_id(&mut self, v: u64) {
        self.client_id = v;
    }

    // uint64 peer_id = 2;


    pub fn get_peer_id(&self) -> u64 {
        self.peer_id
    }
    pub fn clear_peer_id(&mut self) {
        self.peer_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_peer_id(&mut self, v: u64) {
        self.peer_id = v;
    }

    // string peer_addr = 3;


    pub fn get_peer_addr(&self) -> &str {
        &self.peer_addr
    }
    pub fn clear_peer_addr(&mut self) {
        self.peer_addr.clear();
    }

    // Param is passed by value, moved
    pub fn set_peer_addr(&mut self, v: ::std::string::String) {
        self.peer_addr = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_peer_addr(&mut self) -> &mut ::std::string::String {
        &mut self.peer_addr
    }

    // Take field
    pub fn take_peer_addr(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.peer_addr, ::std::string::String::new())
    }
}

impl ::protobuf::Message for LeaveReq {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.client_id = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.peer_id = tmp;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.peer_addr)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.client_id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.client_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.peer_id != 0 {
            my_size += ::protobuf::rt::value_size(2, self.peer_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.peer_addr.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.peer_addr);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.client_id != 0 {
            os.write_uint64(1, self.client_id)?;
        }
        if self.peer_id != 0 {
            os.write_uint64(2, self.peer_id)?;
        }
        if !self.peer_addr.is_empty() {
            os.write_string(3, &self.peer_addr)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> LeaveReq {
        LeaveReq::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "client_id",
                    |m: &LeaveReq| { &m.client_id },
                    |m: &mut LeaveReq| { &mut m.client_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "peer_id",
                    |m: &LeaveReq| { &m.peer_id },
                    |m: &mut LeaveReq| { &mut m.peer_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "peer_addr",
                    |m: &LeaveReq| { &m.peer_addr },
                    |m: &mut LeaveReq| { &mut m.peer_addr },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<LeaveReq>(
                    "LeaveReq",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static LeaveReq {
        static mut instance: ::protobuf::lazy::Lazy<LeaveReq> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const LeaveReq,
        };
        unsafe {
            instance.get(LeaveReq::new)
        }
    }
}

impl ::protobuf::Clear for LeaveReq {
    fn clear(&mut self) {
        self.client_id = 0;
        self.peer_id = 0;
        self.peer_addr.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for LeaveReq {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for LeaveReq {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ProbeReq {
    // message fields
    pub client_id: u64,
    pub seq: u64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ProbeReq {
    fn default() -> &'a ProbeReq {
        <ProbeReq as ::protobuf::Message>::default_instance()
    }
}

impl ProbeReq {
    pub fn new() -> ProbeReq {
        ::std::default::Default::default()
    }

    // uint64 client_id = 1;


    pub fn get_client_id(&self) -> u64 {
        self.client_id
    }
    pub fn clear_client_id(&mut self) {
        self.client_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_client_id(&mut self, v: u64) {
        self.client_id = v;
    }

    // uint64 seq = 2;


    pub fn get_seq(&self) -> u64 {
        self.seq
    }
    pub fn clear_seq(&mut self) {
        self.seq = 0;
    }

    // Param is passed by value, moved
    pub fn set_seq(&mut self, v: u64) {
        self.seq = v;
    }
}

impl ::protobuf::Message for ProbeReq {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.client_id = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.seq = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.client_id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.client_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.seq != 0 {
            my_size += ::protobuf::rt::value_size(2, self.seq, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.client_id != 0 {
            os.write_uint64(1, self.client_id)?;
        }
        if self.seq != 0 {
            os.write_uint64(2, self.seq)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ProbeReq {
        ProbeReq::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "client_id",
                    |m: &ProbeReq| { &m.client_id },
                    |m: &mut ProbeReq| { &mut m.client_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "seq",
                    |m: &ProbeReq| { &m.seq },
                    |m: &mut ProbeReq| { &mut m.seq },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ProbeReq>(
                    "ProbeReq",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ProbeReq {
        static mut instance: ::protobuf::lazy::Lazy<ProbeReq> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ProbeReq,
        };
        unsafe {
            instance.get(ProbeReq::new)
        }
    }
}

impl ::protobuf::Clear for ProbeReq {
    fn clear(&mut self) {
        self.client_id = 0;
        self.seq = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ProbeReq {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ProbeReq {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ProbeResp {
    // message fields
    pub value: ::std::string::String,
    pub err: RespErr,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ProbeResp {
    fn default() -> &'a ProbeResp {
        <ProbeResp as ::protobuf::Message>::default_instance()
    }
}

impl ProbeResp {
    pub fn new() -> ProbeResp {
        ::std::default::Default::default()
    }

    // string value = 1;


    pub fn get_value(&self) -> &str {
        &self.value
    }
    pub fn clear_value(&mut self) {
        self.value.clear();
    }

    // Param is passed by value, moved
    pub fn set_value(&mut self, v: ::std::string::String) {
        self.value = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_value(&mut self) -> &mut ::std::string::String {
        &mut self.value
    }

    // Take field
    pub fn take_value(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.value, ::std::string::String::new())
    }

    // .indexrpcpb.RespErr err = 2;


    pub fn get_err(&self) -> RespErr {
        self.err
    }
    pub fn clear_err(&mut self) {
        self.err = RespErr::OK;
    }

    // Param is passed by value, moved
    pub fn set_err(&mut self, v: RespErr) {
        self.err = v;
    }
}

impl ::protobuf::Message for ProbeResp {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.value)?;
                },
                2 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.err, 2, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.value.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.value);
        }
        if self.err != RespErr::OK {
            my_size += ::protobuf::rt::enum_size(2, self.err);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.value.is_empty() {
            os.write_string(1, &self.value)?;
        }
        if self.err != RespErr::OK {
            os.write_enum(2, self.err.value())?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ProbeResp {
        ProbeResp::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "value",
                    |m: &ProbeResp| { &m.value },
                    |m: &mut ProbeResp| { &mut m.value },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<RespErr>>(
                    "err",
                    |m: &ProbeResp| { &m.err },
                    |m: &mut ProbeResp| { &mut m.err },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ProbeResp>(
                    "ProbeResp",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ProbeResp {
        static mut instance: ::protobuf::lazy::Lazy<ProbeResp> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ProbeResp,
        };
        unsafe {
            instance.get(ProbeResp::new)
        }
    }
}

impl ::protobuf::Clear for ProbeResp {
    fn clear(&mut self) {
        self.value.clear();
        self.err = RespErr::OK;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ProbeResp {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ProbeResp {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct PeersReq {
    // message fields
    pub client_id: u64,
    pub seq: u64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a PeersReq {
    fn default() -> &'a PeersReq {
        <PeersReq as ::protobuf::Message>::default_instance()
    }
}

impl PeersReq {
    pub fn new() -> PeersReq {
        ::std::default::Default::default()
    }

    // uint64 client_id = 1;


    pub fn get_client_id(&self) -> u64 {
        self.client_id
    }
    pub fn clear_client_id(&mut self) {
        self.client_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_client_id(&mut self, v: u64) {
        self.client_id = v;
    }

    // uint64 seq = 2;


    pub fn get_seq(&self) -> u64 {
        self.seq
    }
    pub fn clear_seq(&mut self) {
        self.seq = 0;
    }

    // Param is passed by value, moved
    pub fn set_seq(&mut self, v: u64) {
        self.seq = v;
    }
}

impl ::protobuf::Message for PeersReq {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.client_id = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.seq = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.client_id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.client_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.seq != 0 {
            my_size += ::protobuf::rt::value_size(2, self.seq, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.client_id != 0 {
            os.write_uint64(1, self.client_id)?;
        }
        if self.seq != 0 {
            os.write_uint64(2, self.seq)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> PeersReq {
        PeersReq::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "client_id",
                    |m: &PeersReq| { &m.client_id },
                    |m: &mut PeersReq| { &mut m.client_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "seq",
                    |m: &PeersReq| { &m.seq },
                    |m: &mut PeersReq| { &mut m.seq },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<PeersReq>(
                    "PeersReq",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static PeersReq {
        static mut instance: ::protobuf::lazy::Lazy<PeersReq> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const PeersReq,
        };
        unsafe {
            instance.get(PeersReq::new)
        }
    }
}

impl ::protobuf::Clear for PeersReq {
    fn clear(&mut self) {
        self.client_id = 0;
        self.seq = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for PeersReq {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PeersReq {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct PeersResp {
    // message fields
    pub value: ::std::string::String,
    pub err: RespErr,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a PeersResp {
    fn default() -> &'a PeersResp {
        <PeersResp as ::protobuf::Message>::default_instance()
    }
}

impl PeersResp {
    pub fn new() -> PeersResp {
        ::std::default::Default::default()
    }

    // string value = 1;


    pub fn get_value(&self) -> &str {
        &self.value
    }
    pub fn clear_value(&mut self) {
        self.value.clear();
    }

    // Param is passed by value, moved
    pub fn set_value(&mut self, v: ::std::string::String) {
        self.value = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_value(&mut self) -> &mut ::std::string::String {
        &mut self.value
    }

    // Take field
    pub fn take_value(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.value, ::std::string::String::new())
    }

    // .indexrpcpb.RespErr err = 2;


    pub fn get_err(&self) -> RespErr {
        self.err
    }
    pub fn clear_err(&mut self) {
        self.err = RespErr::OK;
    }

    // Param is passed by value, moved
    pub fn set_err(&mut self, v: RespErr) {
        self.err = v;
    }
}

impl ::protobuf::Message for PeersResp {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.value)?;
                },
                2 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.err, 2, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.value.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.value);
        }
        if self.err != RespErr::OK {
            my_size += ::protobuf::rt::enum_size(2, self.err);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.value.is_empty() {
            os.write_string(1, &self.value)?;
        }
        if self.err != RespErr::OK {
            os.write_enum(2, self.err.value())?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> PeersResp {
        PeersResp::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "value",
                    |m: &PeersResp| { &m.value },
                    |m: &mut PeersResp| { &mut m.value },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<RespErr>>(
                    "err",
                    |m: &PeersResp| { &m.err },
                    |m: &mut PeersResp| { &mut m.err },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<PeersResp>(
                    "PeersResp",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static PeersResp {
        static mut instance: ::protobuf::lazy::Lazy<PeersResp> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const PeersResp,
        };
        unsafe {
            instance.get(PeersResp::new)
        }
    }
}

impl ::protobuf::Clear for PeersResp {
    fn clear(&mut self) {
        self.value.clear();
        self.err = RespErr::OK;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for PeersResp {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PeersResp {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct MetricsReq {
    // message fields
    pub client_id: u64,
    pub seq: u64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MetricsReq {
    fn default() -> &'a MetricsReq {
        <MetricsReq as ::protobuf::Message>::default_instance()
    }
}

impl MetricsReq {
    pub fn new() -> MetricsReq {
        ::std::default::Default::default()
    }

    // uint64 client_id = 1;


    pub fn get_client_id(&self) -> u64 {
        self.client_id
    }
    pub fn clear_client_id(&mut self) {
        self.client_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_client_id(&mut self, v: u64) {
        self.client_id = v;
    }

    // uint64 seq = 2;


    pub fn get_seq(&self) -> u64 {
        self.seq
    }
    pub fn clear_seq(&mut self) {
        self.seq = 0;
    }

    // Param is passed by value, moved
    pub fn set_seq(&mut self, v: u64) {
        self.seq = v;
    }
}

impl ::protobuf::Message for MetricsReq {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.client_id = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.seq = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.client_id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.client_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.seq != 0 {
            my_size += ::protobuf::rt::value_size(2, self.seq, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.client_id != 0 {
            os.write_uint64(1, self.client_id)?;
        }
        if self.seq != 0 {
            os.write_uint64(2, self.seq)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MetricsReq {
        MetricsReq::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "client_id",
                    |m: &MetricsReq| { &m.client_id },
                    |m: &mut MetricsReq| { &mut m.client_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "seq",
                    |m: &MetricsReq| { &m.seq },
                    |m: &mut MetricsReq| { &mut m.seq },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<MetricsReq>(
                    "MetricsReq",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static MetricsReq {
        static mut instance: ::protobuf::lazy::Lazy<MetricsReq> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const MetricsReq,
        };
        unsafe {
            instance.get(MetricsReq::new)
        }
    }
}

impl ::protobuf::Clear for MetricsReq {
    fn clear(&mut self) {
        self.client_id = 0;
        self.seq = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for MetricsReq {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MetricsReq {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct MetricsResp {
    // message fields
    pub value: ::std::string::String,
    pub err: RespErr,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MetricsResp {
    fn default() -> &'a MetricsResp {
        <MetricsResp as ::protobuf::Message>::default_instance()
    }
}

impl MetricsResp {
    pub fn new() -> MetricsResp {
        ::std::default::Default::default()
    }

    // string value = 1;


    pub fn get_value(&self) -> &str {
        &self.value
    }
    pub fn clear_value(&mut self) {
        self.value.clear();
    }

    // Param is passed by value, moved
    pub fn set_value(&mut self, v: ::std::string::String) {
        self.value = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_value(&mut self) -> &mut ::std::string::String {
        &mut self.value
    }

    // Take field
    pub fn take_value(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.value, ::std::string::String::new())
    }

    // .indexrpcpb.RespErr err = 2;


    pub fn get_err(&self) -> RespErr {
        self.err
    }
    pub fn clear_err(&mut self) {
        self.err = RespErr::OK;
    }

    // Param is passed by value, moved
    pub fn set_err(&mut self, v: RespErr) {
        self.err = v;
    }
}

impl ::protobuf::Message for MetricsResp {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.value)?;
                },
                2 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.err, 2, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.value.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.value);
        }
        if self.err != RespErr::OK {
            my_size += ::protobuf::rt::enum_size(2, self.err);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.value.is_empty() {
            os.write_string(1, &self.value)?;
        }
        if self.err != RespErr::OK {
            os.write_enum(2, self.err.value())?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MetricsResp {
        MetricsResp::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "value",
                    |m: &MetricsResp| { &m.value },
                    |m: &mut MetricsResp| { &mut m.value },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<RespErr>>(
                    "err",
                    |m: &MetricsResp| { &m.err },
                    |m: &mut MetricsResp| { &mut m.err },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<MetricsResp>(
                    "MetricsResp",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static MetricsResp {
        static mut instance: ::protobuf::lazy::Lazy<MetricsResp> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const MetricsResp,
        };
        unsafe {
            instance.get(MetricsResp::new)
        }
    }
}

impl ::protobuf::Clear for MetricsResp {
    fn clear(&mut self) {
        self.value.clear();
        self.err = RespErr::OK;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for MetricsResp {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MetricsResp {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GetReq {
    // message fields
    pub client_id: u64,
    pub seq: u64,
    pub doc_id: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GetReq {
    fn default() -> &'a GetReq {
        <GetReq as ::protobuf::Message>::default_instance()
    }
}

impl GetReq {
    pub fn new() -> GetReq {
        ::std::default::Default::default()
    }

    // uint64 client_id = 1;


    pub fn get_client_id(&self) -> u64 {
        self.client_id
    }
    pub fn clear_client_id(&mut self) {
        self.client_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_client_id(&mut self, v: u64) {
        self.client_id = v;
    }

    // uint64 seq = 2;


    pub fn get_seq(&self) -> u64 {
        self.seq
    }
    pub fn clear_seq(&mut self) {
        self.seq = 0;
    }

    // Param is passed by value, moved
    pub fn set_seq(&mut self, v: u64) {
        self.seq = v;
    }

    // string doc_id = 3;


    pub fn get_doc_id(&self) -> &str {
        &self.doc_id
    }
    pub fn clear_doc_id(&mut self) {
        self.doc_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_doc_id(&mut self, v: ::std::string::String) {
        self.doc_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_doc_id(&mut self) -> &mut ::std::string::String {
        &mut self.doc_id
    }

    // Take field
    pub fn take_doc_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.doc_id, ::std::string::String::new())
    }
}

impl ::protobuf::Message for GetReq {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.client_id = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.seq = tmp;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.doc_id)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.client_id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.client_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.seq != 0 {
            my_size += ::protobuf::rt::value_size(2, self.seq, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.doc_id.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.doc_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.client_id != 0 {
            os.write_uint64(1, self.client_id)?;
        }
        if self.seq != 0 {
            os.write_uint64(2, self.seq)?;
        }
        if !self.doc_id.is_empty() {
            os.write_string(3, &self.doc_id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GetReq {
        GetReq::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "client_id",
                    |m: &GetReq| { &m.client_id },
                    |m: &mut GetReq| { &mut m.client_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "seq",
                    |m: &GetReq| { &m.seq },
                    |m: &mut GetReq| { &mut m.seq },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "doc_id",
                    |m: &GetReq| { &m.doc_id },
                    |m: &mut GetReq| { &mut m.doc_id },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<GetReq>(
                    "GetReq",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static GetReq {
        static mut instance: ::protobuf::lazy::Lazy<GetReq> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const GetReq,
        };
        unsafe {
            instance.get(GetReq::new)
        }
    }
}

impl ::protobuf::Clear for GetReq {
    fn clear(&mut self) {
        self.client_id = 0;
        self.seq = 0;
        self.doc_id.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GetReq {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetReq {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GetResp {
    // message fields
    pub value: ::std::string::String,
    pub err: RespErr,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GetResp {
    fn default() -> &'a GetResp {
        <GetResp as ::protobuf::Message>::default_instance()
    }
}

impl GetResp {
    pub fn new() -> GetResp {
        ::std::default::Default::default()
    }

    // string value = 1;


    pub fn get_value(&self) -> &str {
        &self.value
    }
    pub fn clear_value(&mut self) {
        self.value.clear();
    }

    // Param is passed by value, moved
    pub fn set_value(&mut self, v: ::std::string::String) {
        self.value = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_value(&mut self) -> &mut ::std::string::String {
        &mut self.value
    }

    // Take field
    pub fn take_value(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.value, ::std::string::String::new())
    }

    // .indexrpcpb.RespErr err = 2;


    pub fn get_err(&self) -> RespErr {
        self.err
    }
    pub fn clear_err(&mut self) {
        self.err = RespErr::OK;
    }

    // Param is passed by value, moved
    pub fn set_err(&mut self, v: RespErr) {
        self.err = v;
    }
}

impl ::protobuf::Message for GetResp {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.value)?;
                },
                2 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.err, 2, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.value.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.value);
        }
        if self.err != RespErr::OK {
            my_size += ::protobuf::rt::enum_size(2, self.err);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.value.is_empty() {
            os.write_string(1, &self.value)?;
        }
        if self.err != RespErr::OK {
            os.write_enum(2, self.err.value())?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GetResp {
        GetResp::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "value",
                    |m: &GetResp| { &m.value },
                    |m: &mut GetResp| { &mut m.value },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<RespErr>>(
                    "err",
                    |m: &GetResp| { &m.err },
                    |m: &mut GetResp| { &mut m.err },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<GetResp>(
                    "GetResp",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static GetResp {
        static mut instance: ::protobuf::lazy::Lazy<GetResp> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const GetResp,
        };
        unsafe {
            instance.get(GetResp::new)
        }
    }
}

impl ::protobuf::Clear for GetResp {
    fn clear(&mut self) {
        self.value.clear();
        self.err = RespErr::OK;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GetResp {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetResp {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct PutReq {
    // message fields
    pub client_id: u64,
    pub seq: u64,
    pub doc_id: ::std::string::String,
    pub fields: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a PutReq {
    fn default() -> &'a PutReq {
        <PutReq as ::protobuf::Message>::default_instance()
    }
}

impl PutReq {
    pub fn new() -> PutReq {
        ::std::default::Default::default()
    }

    // uint64 client_id = 1;


    pub fn get_client_id(&self) -> u64 {
        self.client_id
    }
    pub fn clear_client_id(&mut self) {
        self.client_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_client_id(&mut self, v: u64) {
        self.client_id = v;
    }

    // uint64 seq = 2;


    pub fn get_seq(&self) -> u64 {
        self.seq
    }
    pub fn clear_seq(&mut self) {
        self.seq = 0;
    }

    // Param is passed by value, moved
    pub fn set_seq(&mut self, v: u64) {
        self.seq = v;
    }

    // string doc_id = 3;


    pub fn get_doc_id(&self) -> &str {
        &self.doc_id
    }
    pub fn clear_doc_id(&mut self) {
        self.doc_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_doc_id(&mut self, v: ::std::string::String) {
        self.doc_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_doc_id(&mut self) -> &mut ::std::string::String {
        &mut self.doc_id
    }

    // Take field
    pub fn take_doc_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.doc_id, ::std::string::String::new())
    }

    // string fields = 4;


    pub fn get_fields(&self) -> &str {
        &self.fields
    }
    pub fn clear_fields(&mut self) {
        self.fields.clear();
    }

    // Param is passed by value, moved
    pub fn set_fields(&mut self, v: ::std::string::String) {
        self.fields = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_fields(&mut self) -> &mut ::std::string::String {
        &mut self.fields
    }

    // Take field
    pub fn take_fields(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.fields, ::std::string::String::new())
    }
}

impl ::protobuf::Message for PutReq {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.client_id = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.seq = tmp;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.doc_id)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.fields)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.client_id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.client_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.seq != 0 {
            my_size += ::protobuf::rt::value_size(2, self.seq, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.doc_id.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.doc_id);
        }
        if !self.fields.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.fields);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.client_id != 0 {
            os.write_uint64(1, self.client_id)?;
        }
        if self.seq != 0 {
            os.write_uint64(2, self.seq)?;
        }
        if !self.doc_id.is_empty() {
            os.write_string(3, &self.doc_id)?;
        }
        if !self.fields.is_empty() {
            os.write_string(4, &self.fields)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> PutReq {
        PutReq::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "client_id",
                    |m: &PutReq| { &m.client_id },
                    |m: &mut PutReq| { &mut m.client_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "seq",
                    |m: &PutReq| { &m.seq },
                    |m: &mut PutReq| { &mut m.seq },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "doc_id",
                    |m: &PutReq| { &m.doc_id },
                    |m: &mut PutReq| { &mut m.doc_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "fields",
                    |m: &PutReq| { &m.fields },
                    |m: &mut PutReq| { &mut m.fields },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<PutReq>(
                    "PutReq",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static PutReq {
        static mut instance: ::protobuf::lazy::Lazy<PutReq> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const PutReq,
        };
        unsafe {
            instance.get(PutReq::new)
        }
    }
}

impl ::protobuf::Clear for PutReq {
    fn clear(&mut self) {
        self.client_id = 0;
        self.seq = 0;
        self.doc_id.clear();
        self.fields.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for PutReq {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PutReq {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct PutResp {
    // message fields
    pub value: ::std::string::String,
    pub err: RespErr,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a PutResp {
    fn default() -> &'a PutResp {
        <PutResp as ::protobuf::Message>::default_instance()
    }
}

impl PutResp {
    pub fn new() -> PutResp {
        ::std::default::Default::default()
    }

    // string value = 1;


    pub fn get_value(&self) -> &str {
        &self.value
    }
    pub fn clear_value(&mut self) {
        self.value.clear();
    }

    // Param is passed by value, moved
    pub fn set_value(&mut self, v: ::std::string::String) {
        self.value = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_value(&mut self) -> &mut ::std::string::String {
        &mut self.value
    }

    // Take field
    pub fn take_value(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.value, ::std::string::String::new())
    }

    // .indexrpcpb.RespErr err = 2;


    pub fn get_err(&self) -> RespErr {
        self.err
    }
    pub fn clear_err(&mut self) {
        self.err = RespErr::OK;
    }

    // Param is passed by value, moved
    pub fn set_err(&mut self, v: RespErr) {
        self.err = v;
    }
}

impl ::protobuf::Message for PutResp {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.value)?;
                },
                2 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.err, 2, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.value.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.value);
        }
        if self.err != RespErr::OK {
            my_size += ::protobuf::rt::enum_size(2, self.err);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.value.is_empty() {
            os.write_string(1, &self.value)?;
        }
        if self.err != RespErr::OK {
            os.write_enum(2, self.err.value())?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> PutResp {
        PutResp::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "value",
                    |m: &PutResp| { &m.value },
                    |m: &mut PutResp| { &mut m.value },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<RespErr>>(
                    "err",
                    |m: &PutResp| { &m.err },
                    |m: &mut PutResp| { &mut m.err },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<PutResp>(
                    "PutResp",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static PutResp {
        static mut instance: ::protobuf::lazy::Lazy<PutResp> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const PutResp,
        };
        unsafe {
            instance.get(PutResp::new)
        }
    }
}

impl ::protobuf::Clear for PutResp {
    fn clear(&mut self) {
        self.value.clear();
        self.err = RespErr::OK;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for PutResp {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PutResp {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct DeleteReq {
    // message fields
    pub client_id: u64,
    pub seq: u64,
    pub doc_id: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a DeleteReq {
    fn default() -> &'a DeleteReq {
        <DeleteReq as ::protobuf::Message>::default_instance()
    }
}

impl DeleteReq {
    pub fn new() -> DeleteReq {
        ::std::default::Default::default()
    }

    // uint64 client_id = 1;


    pub fn get_client_id(&self) -> u64 {
        self.client_id
    }
    pub fn clear_client_id(&mut self) {
        self.client_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_client_id(&mut self, v: u64) {
        self.client_id = v;
    }

    // uint64 seq = 2;


    pub fn get_seq(&self) -> u64 {
        self.seq
    }
    pub fn clear_seq(&mut self) {
        self.seq = 0;
    }

    // Param is passed by value, moved
    pub fn set_seq(&mut self, v: u64) {
        self.seq = v;
    }

    // string doc_id = 3;


    pub fn get_doc_id(&self) -> &str {
        &self.doc_id
    }
    pub fn clear_doc_id(&mut self) {
        self.doc_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_doc_id(&mut self, v: ::std::string::String) {
        self.doc_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_doc_id(&mut self) -> &mut ::std::string::String {
        &mut self.doc_id
    }

    // Take field
    pub fn take_doc_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.doc_id, ::std::string::String::new())
    }
}

impl ::protobuf::Message for DeleteReq {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.client_id = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.seq = tmp;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.doc_id)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.client_id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.client_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.seq != 0 {
            my_size += ::protobuf::rt::value_size(2, self.seq, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.doc_id.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.doc_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.client_id != 0 {
            os.write_uint64(1, self.client_id)?;
        }
        if self.seq != 0 {
            os.write_uint64(2, self.seq)?;
        }
        if !self.doc_id.is_empty() {
            os.write_string(3, &self.doc_id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DeleteReq {
        DeleteReq::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "client_id",
                    |m: &DeleteReq| { &m.client_id },
                    |m: &mut DeleteReq| { &mut m.client_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "seq",
                    |m: &DeleteReq| { &m.seq },
                    |m: &mut DeleteReq| { &mut m.seq },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "doc_id",
                    |m: &DeleteReq| { &m.doc_id },
                    |m: &mut DeleteReq| { &mut m.doc_id },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<DeleteReq>(
                    "DeleteReq",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static DeleteReq {
        static mut instance: ::protobuf::lazy::Lazy<DeleteReq> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const DeleteReq,
        };
        unsafe {
            instance.get(DeleteReq::new)
        }
    }
}

impl ::protobuf::Clear for DeleteReq {
    fn clear(&mut self) {
        self.client_id = 0;
        self.seq = 0;
        self.doc_id.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DeleteReq {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DeleteReq {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct DeleteResp {
    // message fields
    pub value: ::std::string::String,
    pub err: RespErr,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a DeleteResp {
    fn default() -> &'a DeleteResp {
        <DeleteResp as ::protobuf::Message>::default_instance()
    }
}

impl DeleteResp {
    pub fn new() -> DeleteResp {
        ::std::default::Default::default()
    }

    // string value = 1;


    pub fn get_value(&self) -> &str {
        &self.value
    }
    pub fn clear_value(&mut self) {
        self.value.clear();
    }

    // Param is passed by value, moved
    pub fn set_value(&mut self, v: ::std::string::String) {
        self.value = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_value(&mut self) -> &mut ::std::string::String {
        &mut self.value
    }

    // Take field
    pub fn take_value(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.value, ::std::string::String::new())
    }

    // .indexrpcpb.RespErr err = 2;


    pub fn get_err(&self) -> RespErr {
        self.err
    }
    pub fn clear_err(&mut self) {
        self.err = RespErr::OK;
    }

    // Param is passed by value, moved
    pub fn set_err(&mut self, v: RespErr) {
        self.err = v;
    }
}

impl ::protobuf::Message for DeleteResp {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.value)?;
                },
                2 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.err, 2, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.value.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.value);
        }
        if self.err != RespErr::OK {
            my_size += ::protobuf::rt::enum_size(2, self.err);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.value.is_empty() {
            os.write_string(1, &self.value)?;
        }
        if self.err != RespErr::OK {
            os.write_enum(2, self.err.value())?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DeleteResp {
        DeleteResp::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "value",
                    |m: &DeleteResp| { &m.value },
                    |m: &mut DeleteResp| { &mut m.value },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<RespErr>>(
                    "err",
                    |m: &DeleteResp| { &m.err },
                    |m: &mut DeleteResp| { &mut m.err },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<DeleteResp>(
                    "DeleteResp",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static DeleteResp {
        static mut instance: ::protobuf::lazy::Lazy<DeleteResp> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const DeleteResp,
        };
        unsafe {
            instance.get(DeleteResp::new)
        }
    }
}

impl ::protobuf::Clear for DeleteResp {
    fn clear(&mut self) {
        self.value.clear();
        self.err = RespErr::OK;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DeleteResp {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DeleteResp {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CommitReq {
    // message fields
    pub client_id: u64,
    pub seq: u64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CommitReq {
    fn default() -> &'a CommitReq {
        <CommitReq as ::protobuf::Message>::default_instance()
    }
}

impl CommitReq {
    pub fn new() -> CommitReq {
        ::std::default::Default::default()
    }

    // uint64 client_id = 1;


    pub fn get_client_id(&self) -> u64 {
        self.client_id
    }
    pub fn clear_client_id(&mut self) {
        self.client_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_client_id(&mut self, v: u64) {
        self.client_id = v;
    }

    // uint64 seq = 2;


    pub fn get_seq(&self) -> u64 {
        self.seq
    }
    pub fn clear_seq(&mut self) {
        self.seq = 0;
    }

    // Param is passed by value, moved
    pub fn set_seq(&mut self, v: u64) {
        self.seq = v;
    }
}

impl ::protobuf::Message for CommitReq {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.client_id = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.seq = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.client_id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.client_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.seq != 0 {
            my_size += ::protobuf::rt::value_size(2, self.seq, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.client_id != 0 {
            os.write_uint64(1, self.client_id)?;
        }
        if self.seq != 0 {
            os.write_uint64(2, self.seq)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CommitReq {
        CommitReq::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "client_id",
                    |m: &CommitReq| { &m.client_id },
                    |m: &mut CommitReq| { &mut m.client_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "seq",
                    |m: &CommitReq| { &m.seq },
                    |m: &mut CommitReq| { &mut m.seq },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<CommitReq>(
                    "CommitReq",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static CommitReq {
        static mut instance: ::protobuf::lazy::Lazy<CommitReq> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const CommitReq,
        };
        unsafe {
            instance.get(CommitReq::new)
        }
    }
}

impl ::protobuf::Clear for CommitReq {
    fn clear(&mut self) {
        self.client_id = 0;
        self.seq = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CommitReq {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CommitReq {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CommitResp {
    // message fields
    pub value: ::std::string::String,
    pub err: RespErr,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CommitResp {
    fn default() -> &'a CommitResp {
        <CommitResp as ::protobuf::Message>::default_instance()
    }
}

impl CommitResp {
    pub fn new() -> CommitResp {
        ::std::default::Default::default()
    }

    // string value = 1;


    pub fn get_value(&self) -> &str {
        &self.value
    }
    pub fn clear_value(&mut self) {
        self.value.clear();
    }

    // Param is passed by value, moved
    pub fn set_value(&mut self, v: ::std::string::String) {
        self.value = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_value(&mut self) -> &mut ::std::string::String {
        &mut self.value
    }

    // Take field
    pub fn take_value(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.value, ::std::string::String::new())
    }

    // .indexrpcpb.RespErr err = 2;


    pub fn get_err(&self) -> RespErr {
        self.err
    }
    pub fn clear_err(&mut self) {
        self.err = RespErr::OK;
    }

    // Param is passed by value, moved
    pub fn set_err(&mut self, v: RespErr) {
        self.err = v;
    }
}

impl ::protobuf::Message for CommitResp {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.value)?;
                },
                2 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.err, 2, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.value.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.value);
        }
        if self.err != RespErr::OK {
            my_size += ::protobuf::rt::enum_size(2, self.err);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.value.is_empty() {
            os.write_string(1, &self.value)?;
        }
        if self.err != RespErr::OK {
            os.write_enum(2, self.err.value())?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CommitResp {
        CommitResp::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "value",
                    |m: &CommitResp| { &m.value },
                    |m: &mut CommitResp| { &mut m.value },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<RespErr>>(
                    "err",
                    |m: &CommitResp| { &m.err },
                    |m: &mut CommitResp| { &mut m.err },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<CommitResp>(
                    "CommitResp",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static CommitResp {
        static mut instance: ::protobuf::lazy::Lazy<CommitResp> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const CommitResp,
        };
        unsafe {
            instance.get(CommitResp::new)
        }
    }
}

impl ::protobuf::Clear for CommitResp {
    fn clear(&mut self) {
        self.value.clear();
        self.err = RespErr::OK;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CommitResp {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CommitResp {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct RollbackReq {
    // message fields
    pub client_id: u64,
    pub seq: u64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RollbackReq {
    fn default() -> &'a RollbackReq {
        <RollbackReq as ::protobuf::Message>::default_instance()
    }
}

impl RollbackReq {
    pub fn new() -> RollbackReq {
        ::std::default::Default::default()
    }

    // uint64 client_id = 1;


    pub fn get_client_id(&self) -> u64 {
        self.client_id
    }
    pub fn clear_client_id(&mut self) {
        self.client_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_client_id(&mut self, v: u64) {
        self.client_id = v;
    }

    // uint64 seq = 2;


    pub fn get_seq(&self) -> u64 {
        self.seq
    }
    pub fn clear_seq(&mut self) {
        self.seq = 0;
    }

    // Param is passed by value, moved
    pub fn set_seq(&mut self, v: u64) {
        self.seq = v;
    }
}

impl ::protobuf::Message for RollbackReq {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.client_id = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.seq = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.client_id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.client_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.seq != 0 {
            my_size += ::protobuf::rt::value_size(2, self.seq, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.client_id != 0 {
            os.write_uint64(1, self.client_id)?;
        }
        if self.seq != 0 {
            os.write_uint64(2, self.seq)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RollbackReq {
        RollbackReq::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "client_id",
                    |m: &RollbackReq| { &m.client_id },
                    |m: &mut RollbackReq| { &mut m.client_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "seq",
                    |m: &RollbackReq| { &m.seq },
                    |m: &mut RollbackReq| { &mut m.seq },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<RollbackReq>(
                    "RollbackReq",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static RollbackReq {
        static mut instance: ::protobuf::lazy::Lazy<RollbackReq> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const RollbackReq,
        };
        unsafe {
            instance.get(RollbackReq::new)
        }
    }
}

impl ::protobuf::Clear for RollbackReq {
    fn clear(&mut self) {
        self.client_id = 0;
        self.seq = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RollbackReq {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RollbackReq {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct RollbackResp {
    // message fields
    pub value: ::std::string::String,
    pub err: RespErr,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RollbackResp {
    fn default() -> &'a RollbackResp {
        <RollbackResp as ::protobuf::Message>::default_instance()
    }
}

impl RollbackResp {
    pub fn new() -> RollbackResp {
        ::std::default::Default::default()
    }

    // string value = 1;


    pub fn get_value(&self) -> &str {
        &self.value
    }
    pub fn clear_value(&mut self) {
        self.value.clear();
    }

    // Param is passed by value, moved
    pub fn set_value(&mut self, v: ::std::string::String) {
        self.value = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_value(&mut self) -> &mut ::std::string::String {
        &mut self.value
    }

    // Take field
    pub fn take_value(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.value, ::std::string::String::new())
    }

    // .indexrpcpb.RespErr err = 2;


    pub fn get_err(&self) -> RespErr {
        self.err
    }
    pub fn clear_err(&mut self) {
        self.err = RespErr::OK;
    }

    // Param is passed by value, moved
    pub fn set_err(&mut self, v: RespErr) {
        self.err = v;
    }
}

impl ::protobuf::Message for RollbackResp {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.value)?;
                },
                2 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.err, 2, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.value.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.value);
        }
        if self.err != RespErr::OK {
            my_size += ::protobuf::rt::enum_size(2, self.err);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.value.is_empty() {
            os.write_string(1, &self.value)?;
        }
        if self.err != RespErr::OK {
            os.write_enum(2, self.err.value())?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RollbackResp {
        RollbackResp::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "value",
                    |m: &RollbackResp| { &m.value },
                    |m: &mut RollbackResp| { &mut m.value },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<RespErr>>(
                    "err",
                    |m: &RollbackResp| { &m.err },
                    |m: &mut RollbackResp| { &mut m.err },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<RollbackResp>(
                    "RollbackResp",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static RollbackResp {
        static mut instance: ::protobuf::lazy::Lazy<RollbackResp> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const RollbackResp,
        };
        unsafe {
            instance.get(RollbackResp::new)
        }
    }
}

impl ::protobuf::Clear for RollbackResp {
    fn clear(&mut self) {
        self.value.clear();
        self.err = RespErr::OK;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RollbackResp {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RollbackResp {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct MergeReq {
    // message fields
    pub client_id: u64,
    pub seq: u64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MergeReq {
    fn default() -> &'a MergeReq {
        <MergeReq as ::protobuf::Message>::default_instance()
    }
}

impl MergeReq {
    pub fn new() -> MergeReq {
        ::std::default::Default::default()
    }

    // uint64 client_id = 1;


    pub fn get_client_id(&self) -> u64 {
        self.client_id
    }
    pub fn clear_client_id(&mut self) {
        self.client_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_client_id(&mut self, v: u64) {
        self.client_id = v;
    }

    // uint64 seq = 2;


    pub fn get_seq(&self) -> u64 {
        self.seq
    }
    pub fn clear_seq(&mut self) {
        self.seq = 0;
    }

    // Param is passed by value, moved
    pub fn set_seq(&mut self, v: u64) {
        self.seq = v;
    }
}

impl ::protobuf::Message for MergeReq {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.client_id = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.seq = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.client_id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.client_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.seq != 0 {
            my_size += ::protobuf::rt::value_size(2, self.seq, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.client_id != 0 {
            os.write_uint64(1, self.client_id)?;
        }
        if self.seq != 0 {
            os.write_uint64(2, self.seq)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MergeReq {
        MergeReq::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "client_id",
                    |m: &MergeReq| { &m.client_id },
                    |m: &mut MergeReq| { &mut m.client_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "seq",
                    |m: &MergeReq| { &m.seq },
                    |m: &mut MergeReq| { &mut m.seq },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<MergeReq>(
                    "MergeReq",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static MergeReq {
        static mut instance: ::protobuf::lazy::Lazy<MergeReq> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const MergeReq,
        };
        unsafe {
            instance.get(MergeReq::new)
        }
    }
}

impl ::protobuf::Clear for MergeReq {
    fn clear(&mut self) {
        self.client_id = 0;
        self.seq = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for MergeReq {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MergeReq {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct MergeResp {
    // message fields
    pub value: ::std::string::String,
    pub err: RespErr,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MergeResp {
    fn default() -> &'a MergeResp {
        <MergeResp as ::protobuf::Message>::default_instance()
    }
}

impl MergeResp {
    pub fn new() -> MergeResp {
        ::std::default::Default::default()
    }

    // string value = 1;


    pub fn get_value(&self) -> &str {
        &self.value
    }
    pub fn clear_value(&mut self) {
        self.value.clear();
    }

    // Param is passed by value, moved
    pub fn set_value(&mut self, v: ::std::string::String) {
        self.value = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_value(&mut self) -> &mut ::std::string::String {
        &mut self.value
    }

    // Take field
    pub fn take_value(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.value, ::std::string::String::new())
    }

    // .indexrpcpb.RespErr err = 2;


    pub fn get_err(&self) -> RespErr {
        self.err
    }
    pub fn clear_err(&mut self) {
        self.err = RespErr::OK;
    }

    // Param is passed by value, moved
    pub fn set_err(&mut self, v: RespErr) {
        self.err = v;
    }
}

impl ::protobuf::Message for MergeResp {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.value)?;
                },
                2 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.err, 2, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.value.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.value);
        }
        if self.err != RespErr::OK {
            my_size += ::protobuf::rt::enum_size(2, self.err);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.value.is_empty() {
            os.write_string(1, &self.value)?;
        }
        if self.err != RespErr::OK {
            os.write_enum(2, self.err.value())?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MergeResp {
        MergeResp::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "value",
                    |m: &MergeResp| { &m.value },
                    |m: &mut MergeResp| { &mut m.value },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<RespErr>>(
                    "err",
                    |m: &MergeResp| { &m.err },
                    |m: &mut MergeResp| { &mut m.err },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<MergeResp>(
                    "MergeResp",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static MergeResp {
        static mut instance: ::protobuf::lazy::Lazy<MergeResp> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const MergeResp,
        };
        unsafe {
            instance.get(MergeResp::new)
        }
    }
}

impl ::protobuf::Clear for MergeResp {
    fn clear(&mut self) {
        self.value.clear();
        self.err = RespErr::OK;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for MergeResp {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MergeResp {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct SearchReq {
    // message fields
    pub client_id: u64,
    pub seq: u64,
    pub query: ::std::string::String,
    pub from: u64,
    pub limit: u64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SearchReq {
    fn default() -> &'a SearchReq {
        <SearchReq as ::protobuf::Message>::default_instance()
    }
}

impl SearchReq {
    pub fn new() -> SearchReq {
        ::std::default::Default::default()
    }

    // uint64 client_id = 1;


    pub fn get_client_id(&self) -> u64 {
        self.client_id
    }
    pub fn clear_client_id(&mut self) {
        self.client_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_client_id(&mut self, v: u64) {
        self.client_id = v;
    }

    // uint64 seq = 2;


    pub fn get_seq(&self) -> u64 {
        self.seq
    }
    pub fn clear_seq(&mut self) {
        self.seq = 0;
    }

    // Param is passed by value, moved
    pub fn set_seq(&mut self, v: u64) {
        self.seq = v;
    }

    // string query = 3;


    pub fn get_query(&self) -> &str {
        &self.query
    }
    pub fn clear_query(&mut self) {
        self.query.clear();
    }

    // Param is passed by value, moved
    pub fn set_query(&mut self, v: ::std::string::String) {
        self.query = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_query(&mut self) -> &mut ::std::string::String {
        &mut self.query
    }

    // Take field
    pub fn take_query(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.query, ::std::string::String::new())
    }

    // uint64 from = 4;


    pub fn get_from(&self) -> u64 {
        self.from
    }
    pub fn clear_from(&mut self) {
        self.from = 0;
    }

    // Param is passed by value, moved
    pub fn set_from(&mut self, v: u64) {
        self.from = v;
    }

    // uint64 limit = 5;


    pub fn get_limit(&self) -> u64 {
        self.limit
    }
    pub fn clear_limit(&mut self) {
        self.limit = 0;
    }

    // Param is passed by value, moved
    pub fn set_limit(&mut self, v: u64) {
        self.limit = v;
    }
}

impl ::protobuf::Message for SearchReq {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.client_id = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.seq = tmp;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.query)?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.from = tmp;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.limit = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.client_id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.client_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.seq != 0 {
            my_size += ::protobuf::rt::value_size(2, self.seq, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.query.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.query);
        }
        if self.from != 0 {
            my_size += ::protobuf::rt::value_size(4, self.from, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.limit != 0 {
            my_size += ::protobuf::rt::value_size(5, self.limit, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.client_id != 0 {
            os.write_uint64(1, self.client_id)?;
        }
        if self.seq != 0 {
            os.write_uint64(2, self.seq)?;
        }
        if !self.query.is_empty() {
            os.write_string(3, &self.query)?;
        }
        if self.from != 0 {
            os.write_uint64(4, self.from)?;
        }
        if self.limit != 0 {
            os.write_uint64(5, self.limit)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SearchReq {
        SearchReq::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "client_id",
                    |m: &SearchReq| { &m.client_id },
                    |m: &mut SearchReq| { &mut m.client_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "seq",
                    |m: &SearchReq| { &m.seq },
                    |m: &mut SearchReq| { &mut m.seq },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "query",
                    |m: &SearchReq| { &m.query },
                    |m: &mut SearchReq| { &mut m.query },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "from",
                    |m: &SearchReq| { &m.from },
                    |m: &mut SearchReq| { &mut m.from },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "limit",
                    |m: &SearchReq| { &m.limit },
                    |m: &mut SearchReq| { &mut m.limit },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<SearchReq>(
                    "SearchReq",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static SearchReq {
        static mut instance: ::protobuf::lazy::Lazy<SearchReq> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const SearchReq,
        };
        unsafe {
            instance.get(SearchReq::new)
        }
    }
}

impl ::protobuf::Clear for SearchReq {
    fn clear(&mut self) {
        self.client_id = 0;
        self.seq = 0;
        self.query.clear();
        self.from = 0;
        self.limit = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SearchReq {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SearchReq {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct SearchResp {
    // message fields
    pub value: ::std::string::String,
    pub err: RespErr,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SearchResp {
    fn default() -> &'a SearchResp {
        <SearchResp as ::protobuf::Message>::default_instance()
    }
}

impl SearchResp {
    pub fn new() -> SearchResp {
        ::std::default::Default::default()
    }

    // string value = 1;


    pub fn get_value(&self) -> &str {
        &self.value
    }
    pub fn clear_value(&mut self) {
        self.value.clear();
    }

    // Param is passed by value, moved
    pub fn set_value(&mut self, v: ::std::string::String) {
        self.value = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_value(&mut self) -> &mut ::std::string::String {
        &mut self.value
    }

    // Take field
    pub fn take_value(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.value, ::std::string::String::new())
    }

    // .indexrpcpb.RespErr err = 2;


    pub fn get_err(&self) -> RespErr {
        self.err
    }
    pub fn clear_err(&mut self) {
        self.err = RespErr::OK;
    }

    // Param is passed by value, moved
    pub fn set_err(&mut self, v: RespErr) {
        self.err = v;
    }
}

impl ::protobuf::Message for SearchResp {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.value)?;
                },
                2 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.err, 2, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.value.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.value);
        }
        if self.err != RespErr::OK {
            my_size += ::protobuf::rt::enum_size(2, self.err);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.value.is_empty() {
            os.write_string(1, &self.value)?;
        }
        if self.err != RespErr::OK {
            os.write_enum(2, self.err.value())?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SearchResp {
        SearchResp::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "value",
                    |m: &SearchResp| { &m.value },
                    |m: &mut SearchResp| { &mut m.value },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<RespErr>>(
                    "err",
                    |m: &SearchResp| { &m.err },
                    |m: &mut SearchResp| { &mut m.err },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<SearchResp>(
                    "SearchResp",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static SearchResp {
        static mut instance: ::protobuf::lazy::Lazy<SearchResp> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const SearchResp,
        };
        unsafe {
            instance.get(SearchResp::new)
        }
    }
}

impl ::protobuf::Clear for SearchResp {
    fn clear(&mut self) {
        self.value.clear();
        self.err = RespErr::OK;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SearchResp {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SearchResp {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct SchemaReq {
    // message fields
    pub client_id: u64,
    pub seq: u64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SchemaReq {
    fn default() -> &'a SchemaReq {
        <SchemaReq as ::protobuf::Message>::default_instance()
    }
}

impl SchemaReq {
    pub fn new() -> SchemaReq {
        ::std::default::Default::default()
    }

    // uint64 client_id = 1;


    pub fn get_client_id(&self) -> u64 {
        self.client_id
    }
    pub fn clear_client_id(&mut self) {
        self.client_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_client_id(&mut self, v: u64) {
        self.client_id = v;
    }

    // uint64 seq = 2;


    pub fn get_seq(&self) -> u64 {
        self.seq
    }
    pub fn clear_seq(&mut self) {
        self.seq = 0;
    }

    // Param is passed by value, moved
    pub fn set_seq(&mut self, v: u64) {
        self.seq = v;
    }
}

impl ::protobuf::Message for SchemaReq {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.client_id = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.seq = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.client_id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.client_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.seq != 0 {
            my_size += ::protobuf::rt::value_size(2, self.seq, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.client_id != 0 {
            os.write_uint64(1, self.client_id)?;
        }
        if self.seq != 0 {
            os.write_uint64(2, self.seq)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SchemaReq {
        SchemaReq::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "client_id",
                    |m: &SchemaReq| { &m.client_id },
                    |m: &mut SchemaReq| { &mut m.client_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "seq",
                    |m: &SchemaReq| { &m.seq },
                    |m: &mut SchemaReq| { &mut m.seq },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<SchemaReq>(
                    "SchemaReq",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static SchemaReq {
        static mut instance: ::protobuf::lazy::Lazy<SchemaReq> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const SchemaReq,
        };
        unsafe {
            instance.get(SchemaReq::new)
        }
    }
}

impl ::protobuf::Clear for SchemaReq {
    fn clear(&mut self) {
        self.client_id = 0;
        self.seq = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SchemaReq {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SchemaReq {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct SchemaResp {
    // message fields
    pub value: ::std::string::String,
    pub err: RespErr,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SchemaResp {
    fn default() -> &'a SchemaResp {
        <SchemaResp as ::protobuf::Message>::default_instance()
    }
}

impl SchemaResp {
    pub fn new() -> SchemaResp {
        ::std::default::Default::default()
    }

    // string value = 1;


    pub fn get_value(&self) -> &str {
        &self.value
    }
    pub fn clear_value(&mut self) {
        self.value.clear();
    }

    // Param is passed by value, moved
    pub fn set_value(&mut self, v: ::std::string::String) {
        self.value = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_value(&mut self) -> &mut ::std::string::String {
        &mut self.value
    }

    // Take field
    pub fn take_value(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.value, ::std::string::String::new())
    }

    // .indexrpcpb.RespErr err = 2;


    pub fn get_err(&self) -> RespErr {
        self.err
    }
    pub fn clear_err(&mut self) {
        self.err = RespErr::OK;
    }

    // Param is passed by value, moved
    pub fn set_err(&mut self, v: RespErr) {
        self.err = v;
    }
}

impl ::protobuf::Message for SchemaResp {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.value)?;
                },
                2 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.err, 2, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.value.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.value);
        }
        if self.err != RespErr::OK {
            my_size += ::protobuf::rt::enum_size(2, self.err);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.value.is_empty() {
            os.write_string(1, &self.value)?;
        }
        if self.err != RespErr::OK {
            os.write_enum(2, self.err.value())?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SchemaResp {
        SchemaResp::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "value",
                    |m: &SchemaResp| { &m.value },
                    |m: &mut SchemaResp| { &mut m.value },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<RespErr>>(
                    "err",
                    |m: &SchemaResp| { &m.err },
                    |m: &mut SchemaResp| { &mut m.err },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<SchemaResp>(
                    "SchemaResp",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static SchemaResp {
        static mut instance: ::protobuf::lazy::Lazy<SchemaResp> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const SchemaResp,
        };
        unsafe {
            instance.get(SchemaResp::new)
        }
    }
}

impl ::protobuf::Clear for SchemaResp {
    fn clear(&mut self) {
        self.value.clear();
        self.err = RespErr::OK;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SchemaResp {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SchemaResp {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum RespErr {
    OK = 0,
    ErrWrongLeader = 1,
    ErrNoKey = 2,
}

impl ::protobuf::ProtobufEnum for RespErr {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<RespErr> {
        match value {
            0 => ::std::option::Option::Some(RespErr::OK),
            1 => ::std::option::Option::Some(RespErr::ErrWrongLeader),
            2 => ::std::option::Option::Some(RespErr::ErrNoKey),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [RespErr] = &[
            RespErr::OK,
            RespErr::ErrWrongLeader,
            RespErr::ErrNoKey,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("RespErr", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for RespErr {
}

impl ::std::default::Default for RespErr {
    fn default() -> Self {
        RespErr::OK
    }
}

impl ::protobuf::reflect::ProtobufValue for RespErr {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Enum(self.descriptor())
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum ReqType {
    Join = 0,
    Leave = 1,
    Put = 2,
    Delete = 3,
    Commit = 4,
    Rollback = 5,
    Merge = 6,
}

impl ::protobuf::ProtobufEnum for ReqType {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<ReqType> {
        match value {
            0 => ::std::option::Option::Some(ReqType::Join),
            1 => ::std::option::Option::Some(ReqType::Leave),
            2 => ::std::option::Option::Some(ReqType::Put),
            3 => ::std::option::Option::Some(ReqType::Delete),
            4 => ::std::option::Option::Some(ReqType::Commit),
            5 => ::std::option::Option::Some(ReqType::Rollback),
            6 => ::std::option::Option::Some(ReqType::Merge),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [ReqType] = &[
            ReqType::Join,
            ReqType::Leave,
            ReqType::Put,
            ReqType::Delete,
            ReqType::Commit,
            ReqType::Rollback,
            ReqType::Merge,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("ReqType", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for ReqType {
}

impl ::std::default::Default for ReqType {
    fn default() -> Self {
        ReqType::Join
    }
}

impl ::protobuf::reflect::ProtobufValue for ReqType {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Enum(self.descriptor())
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x10indexrpcpb.proto\x12\nindexrpcpb\x1a\reraftpb.proto\"\xc2\x03\n\
    \x08ApplyReq\x12\x1b\n\tclient_id\x18\x01\x20\x01(\x04R\x08clientId\x12.\
    \n\x08req_type\x18\x02\x20\x01(\x0e2\x13.indexrpcpb.ReqTypeR\x07reqType\
    \x12.\n\x08join_req\x18\x03\x20\x01(\x0b2\x13.indexrpcpb.JoinReqR\x07joi\
    nReq\x121\n\tleave_req\x18\x04\x20\x01(\x0b2\x14.indexrpcpb.LeaveReqR\
    \x08leaveReq\x12+\n\x07put_req\x18\x05\x20\x01(\x0b2\x12.indexrpcpb.PutR\
    eqR\x06putReq\x124\n\ndelete_req\x18\x06\x20\x01(\x0b2\x15.indexrpcpb.De\
    leteReqR\tdeleteReq\x124\n\ncommit_req\x18\x07\x20\x01(\x0b2\x15.indexrp\
    cpb.CommitReqR\tcommitReq\x12:\n\x0crollback_req\x18\x08\x20\x01(\x0b2\
    \x17.indexrpcpb.RollbackReqR\x0brollbackReq\x121\n\tmerge_req\x18\t\x20\
    \x01(\x0b2\x14.indexrpcpb.MergeReqR\x08mergeReq\"X\n\rConfChangeReq\x12#\
    \n\x02cc\x18\x01\x20\x01(\x0b2\x13.eraftpb.ConfChangeR\x02cc\x12\x0e\n\
    \x02ip\x18\x02\x20\x01(\tR\x02ip\x12\x12\n\x04port\x18\x03\x20\x01(\rR\
    \x04port\"1\n\x08RaftDone\x12%\n\x03err\x18\x01\x20\x01(\x0e2\x13.indexr\
    pcpb.RespErrR\x03err\"\\\n\x07JoinReq\x12\x1b\n\tclient_id\x18\x01\x20\
    \x01(\x04R\x08clientId\x12\x17\n\x07peer_id\x18\x02\x20\x01(\x04R\x06pee\
    rId\x12\x1b\n\tpeer_addr\x18\x03\x20\x01(\tR\x08peerAddr\"]\n\x08LeaveRe\
    q\x12\x1b\n\tclient_id\x18\x01\x20\x01(\x04R\x08clientId\x12\x17\n\x07pe\
    er_id\x18\x02\x20\x01(\x04R\x06peerId\x12\x1b\n\tpeer_addr\x18\x03\x20\
    \x01(\tR\x08peerAddr\"9\n\x08ProbeReq\x12\x1b\n\tclient_id\x18\x01\x20\
    \x01(\x04R\x08clientId\x12\x10\n\x03seq\x18\x02\x20\x01(\x04R\x03seq\"H\
    \n\tProbeResp\x12\x14\n\x05value\x18\x01\x20\x01(\tR\x05value\x12%\n\x03\
    err\x18\x02\x20\x01(\x0e2\x13.indexrpcpb.RespErrR\x03err\"9\n\x08PeersRe\
    q\x12\x1b\n\tclient_id\x18\x01\x20\x01(\x04R\x08clientId\x12\x10\n\x03se\
    q\x18\x02\x20\x01(\x04R\x03seq\"H\n\tPeersResp\x12\x14\n\x05value\x18\
    \x01\x20\x01(\tR\x05value\x12%\n\x03err\x18\x02\x20\x01(\x0e2\x13.indexr\
    pcpb.RespErrR\x03err\";\n\nMetricsReq\x12\x1b\n\tclient_id\x18\x01\x20\
    \x01(\x04R\x08clientId\x12\x10\n\x03seq\x18\x02\x20\x01(\x04R\x03seq\"J\
    \n\x0bMetricsResp\x12\x14\n\x05value\x18\x01\x20\x01(\tR\x05value\x12%\n\
    \x03err\x18\x02\x20\x01(\x0e2\x13.indexrpcpb.RespErrR\x03err\"N\n\x06Get\
    Req\x12\x1b\n\tclient_id\x18\x01\x20\x01(\x04R\x08clientId\x12\x10\n\x03\
    seq\x18\x02\x20\x01(\x04R\x03seq\x12\x15\n\x06doc_id\x18\x03\x20\x01(\tR\
    \x05docId\"F\n\x07GetResp\x12\x14\n\x05value\x18\x01\x20\x01(\tR\x05valu\
    e\x12%\n\x03err\x18\x02\x20\x01(\x0e2\x13.indexrpcpb.RespErrR\x03err\"f\
    \n\x06PutReq\x12\x1b\n\tclient_id\x18\x01\x20\x01(\x04R\x08clientId\x12\
    \x10\n\x03seq\x18\x02\x20\x01(\x04R\x03seq\x12\x15\n\x06doc_id\x18\x03\
    \x20\x01(\tR\x05docId\x12\x16\n\x06fields\x18\x04\x20\x01(\tR\x06fields\
    \"F\n\x07PutResp\x12\x14\n\x05value\x18\x01\x20\x01(\tR\x05value\x12%\n\
    \x03err\x18\x02\x20\x01(\x0e2\x13.indexrpcpb.RespErrR\x03err\"Q\n\tDelet\
    eReq\x12\x1b\n\tclient_id\x18\x01\x20\x01(\x04R\x08clientId\x12\x10\n\
    \x03seq\x18\x02\x20\x01(\x04R\x03seq\x12\x15\n\x06doc_id\x18\x03\x20\x01\
    (\tR\x05docId\"I\n\nDeleteResp\x12\x14\n\x05value\x18\x01\x20\x01(\tR\
    \x05value\x12%\n\x03err\x18\x02\x20\x01(\x0e2\x13.indexrpcpb.RespErrR\
    \x03err\":\n\tCommitReq\x12\x1b\n\tclient_id\x18\x01\x20\x01(\x04R\x08cl\
    ientId\x12\x10\n\x03seq\x18\x02\x20\x01(\x04R\x03seq\"I\n\nCommitResp\
    \x12\x14\n\x05value\x18\x01\x20\x01(\tR\x05value\x12%\n\x03err\x18\x02\
    \x20\x01(\x0e2\x13.indexrpcpb.RespErrR\x03err\"<\n\x0bRollbackReq\x12\
    \x1b\n\tclient_id\x18\x01\x20\x01(\x04R\x08clientId\x12\x10\n\x03seq\x18\
    \x02\x20\x01(\x04R\x03seq\"K\n\x0cRollbackResp\x12\x14\n\x05value\x18\
    \x01\x20\x01(\tR\x05value\x12%\n\x03err\x18\x02\x20\x01(\x0e2\x13.indexr\
    pcpb.RespErrR\x03err\"9\n\x08MergeReq\x12\x1b\n\tclient_id\x18\x01\x20\
    \x01(\x04R\x08clientId\x12\x10\n\x03seq\x18\x02\x20\x01(\x04R\x03seq\"H\
    \n\tMergeResp\x12\x14\n\x05value\x18\x01\x20\x01(\tR\x05value\x12%\n\x03\
    err\x18\x02\x20\x01(\x0e2\x13.indexrpcpb.RespErrR\x03err\"z\n\tSearchReq\
    \x12\x1b\n\tclient_id\x18\x01\x20\x01(\x04R\x08clientId\x12\x10\n\x03seq\
    \x18\x02\x20\x01(\x04R\x03seq\x12\x14\n\x05query\x18\x03\x20\x01(\tR\x05\
    query\x12\x12\n\x04from\x18\x04\x20\x01(\x04R\x04from\x12\x14\n\x05limit\
    \x18\x05\x20\x01(\x04R\x05limit\"I\n\nSearchResp\x12\x14\n\x05value\x18\
    \x01\x20\x01(\tR\x05value\x12%\n\x03err\x18\x02\x20\x01(\x0e2\x13.indexr\
    pcpb.RespErrR\x03err\":\n\tSchemaReq\x12\x1b\n\tclient_id\x18\x01\x20\
    \x01(\x04R\x08clientId\x12\x10\n\x03seq\x18\x02\x20\x01(\x04R\x03seq\"I\
    \n\nSchemaResp\x12\x14\n\x05value\x18\x01\x20\x01(\tR\x05value\x12%\n\
    \x03err\x18\x02\x20\x01(\x0e2\x13.indexrpcpb.RespErrR\x03err*3\n\x07Resp\
    Err\x12\x06\n\x02OK\x10\0\x12\x12\n\x0eErrWrongLeader\x10\x01\x12\x0c\n\
    \x08ErrNoKey\x10\x02*X\n\x07ReqType\x12\x08\n\x04Join\x10\0\x12\t\n\x05L\
    eave\x10\x01\x12\x07\n\x03Put\x10\x02\x12\n\n\x06Delete\x10\x03\x12\n\n\
    \x06Commit\x10\x04\x12\x0c\n\x08Rollback\x10\x05\x12\t\n\x05Merge\x10\
    \x06J\xa80\n\x07\x12\x05\0\0\xaa\x01\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\
    \n\x08\n\x01\x02\x12\x03\x01\0\x13\n\t\n\x02\x03\0\x12\x03\x03\0\x17\n\n\
    \n\x02\x05\0\x12\x04\x05\0\t\x01\n\n\n\x03\x05\0\x01\x12\x03\x05\x05\x0c\
    \n\x0b\n\x04\x05\0\x02\0\x12\x03\x06\x04\x0b\n\x0c\n\x05\x05\0\x02\0\x01\
    \x12\x03\x06\x04\x06\n\x0c\n\x05\x05\0\x02\0\x02\x12\x03\x06\t\n\n\x0b\n\
    \x04\x05\0\x02\x01\x12\x03\x07\x04\x17\n\x0c\n\x05\x05\0\x02\x01\x01\x12\
    \x03\x07\x04\x12\n\x0c\n\x05\x05\0\x02\x01\x02\x12\x03\x07\x15\x16\n\x0b\
    \n\x04\x05\0\x02\x02\x12\x03\x08\x04\x11\n\x0c\n\x05\x05\0\x02\x02\x01\
    \x12\x03\x08\x04\x0c\n\x0c\n\x05\x05\0\x02\x02\x02\x12\x03\x08\x0f\x10\n\
    \n\n\x02\x05\x01\x12\x04\x0b\0\x13\x01\n\n\n\x03\x05\x01\x01\x12\x03\x0b\
    \x05\x0c\n\x0b\n\x04\x05\x01\x02\0\x12\x03\x0c\x04\r\n\x0c\n\x05\x05\x01\
    \x02\0\x01\x12\x03\x0c\x04\x08\n\x0c\n\x05\x05\x01\x02\0\x02\x12\x03\x0c\
    \x0b\x0c\n\x0b\n\x04\x05\x01\x02\x01\x12\x03\r\x04\x0e\n\x0c\n\x05\x05\
    \x01\x02\x01\x01\x12\x03\r\x04\t\n\x0c\n\x05\x05\x01\x02\x01\x02\x12\x03\
    \r\x0c\r\n\x0b\n\x04\x05\x01\x02\x02\x12\x03\x0e\x04\x0c\n\x0c\n\x05\x05\
    \x01\x02\x02\x01\x12\x03\x0e\x04\x07\n\x0c\n\x05\x05\x01\x02\x02\x02\x12\
    \x03\x0e\n\x0b\n\x0b\n\x04\x05\x01\x02\x03\x12\x03\x0f\x04\x0f\n\x0c\n\
    \x05\x05\x01\x02\x03\x01\x12\x03\x0f\x04\n\n\x0c\n\x05\x05\x01\x02\x03\
    \x02\x12\x03\x0f\r\x0e\n\x0b\n\x04\x05\x01\x02\x04\x12\x03\x10\x04\x0f\n\
    \x0c\n\x05\x05\x01\x02\x04\x01\x12\x03\x10\x04\n\n\x0c\n\x05\x05\x01\x02\
    \x04\x02\x12\x03\x10\r\x0e\n\x0b\n\x04\x05\x01\x02\x05\x12\x03\x11\x04\
    \x11\n\x0c\n\x05\x05\x01\x02\x05\x01\x12\x03\x11\x04\x0c\n\x0c\n\x05\x05\
    \x01\x02\x05\x02\x12\x03\x11\x0f\x10\n\x0b\n\x04\x05\x01\x02\x06\x12\x03\
    \x12\x04\x0e\n\x0c\n\x05\x05\x01\x02\x06\x01\x12\x03\x12\x04\t\n\x0c\n\
    \x05\x05\x01\x02\x06\x02\x12\x03\x12\x0c\r\n\n\n\x02\x04\0\x12\x04\x15\0\
    \x1f\x01\n\n\n\x03\x04\0\x01\x12\x03\x15\x08\x10\n\x0b\n\x04\x04\0\x02\0\
    \x12\x03\x16\x04\x19\n\r\n\x05\x04\0\x02\0\x04\x12\x04\x16\x04\x15\x12\n\
    \x0c\n\x05\x04\0\x02\0\x05\x12\x03\x16\x04\n\n\x0c\n\x05\x04\0\x02\0\x01\
    \x12\x03\x16\x0b\x14\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\x16\x17\x18\n\
    \x0b\n\x04\x04\0\x02\x01\x12\x03\x17\x04\x19\n\r\n\x05\x04\0\x02\x01\x04\
    \x12\x04\x17\x04\x16\x19\n\x0c\n\x05\x04\0\x02\x01\x06\x12\x03\x17\x04\
    \x0b\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03\x17\x0c\x14\n\x0c\n\x05\x04\0\
    \x02\x01\x03\x12\x03\x17\x17\x18\n\x0b\n\x04\x04\0\x02\x02\x12\x03\x18\
    \x04\x19\n\r\n\x05\x04\0\x02\x02\x04\x12\x04\x18\x04\x17\x19\n\x0c\n\x05\
    \x04\0\x02\x02\x06\x12\x03\x18\x04\x0b\n\x0c\n\x05\x04\0\x02\x02\x01\x12\
    \x03\x18\x0c\x14\n\x0c\n\x05\x04\0\x02\x02\x03\x12\x03\x18\x17\x18\n\x0b\
    \n\x04\x04\0\x02\x03\x12\x03\x19\x04\x1b\n\r\n\x05\x04\0\x02\x03\x04\x12\
    \x04\x19\x04\x18\x19\n\x0c\n\x05\x04\0\x02\x03\x06\x12\x03\x19\x04\x0c\n\
    \x0c\n\x05\x04\0\x02\x03\x01\x12\x03\x19\r\x16\n\x0c\n\x05\x04\0\x02\x03\
    \x03\x12\x03\x19\x19\x1a\n\x0b\n\x04\x04\0\x02\x04\x12\x03\x1a\x04\x17\n\
    \r\n\x05\x04\0\x02\x04\x04\x12\x04\x1a\x04\x19\x1b\n\x0c\n\x05\x04\0\x02\
    \x04\x06\x12\x03\x1a\x04\n\n\x0c\n\x05\x04\0\x02\x04\x01\x12\x03\x1a\x0b\
    \x12\n\x0c\n\x05\x04\0\x02\x04\x03\x12\x03\x1a\x15\x16\n\x0b\n\x04\x04\0\
    \x02\x05\x12\x03\x1b\x04\x1d\n\r\n\x05\x04\0\x02\x05\x04\x12\x04\x1b\x04\
    \x1a\x17\n\x0c\n\x05\x04\0\x02\x05\x06\x12\x03\x1b\x04\r\n\x0c\n\x05\x04\
    \0\x02\x05\x01\x12\x03\x1b\x0e\x18\n\x0c\n\x05\x04\0\x02\x05\x03\x12\x03\
    \x1b\x1b\x1c\n\x0b\n\x04\x04\0\x02\x06\x12\x03\x1c\x04\x1d\n\r\n\x05\x04\
    \0\x02\x06\x04\x12\x04\x1c\x04\x1b\x1d\n\x0c\n\x05\x04\0\x02\x06\x06\x12\
    \x03\x1c\x04\r\n\x0c\n\x05\x04\0\x02\x06\x01\x12\x03\x1c\x0e\x18\n\x0c\n\
    \x05\x04\0\x02\x06\x03\x12\x03\x1c\x1b\x1c\n\x0b\n\x04\x04\0\x02\x07\x12\
    \x03\x1d\x04!\n\r\n\x05\x04\0\x02\x07\x04\x12\x04\x1d\x04\x1c\x1d\n\x0c\
    \n\x05\x04\0\x02\x07\x06\x12\x03\x1d\x04\x0f\n\x0c\n\x05\x04\0\x02\x07\
    \x01\x12\x03\x1d\x10\x1c\n\x0c\n\x05\x04\0\x02\x07\x03\x12\x03\x1d\x1f\
    \x20\n\x0b\n\x04\x04\0\x02\x08\x12\x03\x1e\x04\x1b\n\r\n\x05\x04\0\x02\
    \x08\x04\x12\x04\x1e\x04\x1d!\n\x0c\n\x05\x04\0\x02\x08\x06\x12\x03\x1e\
    \x04\x0c\n\x0c\n\x05\x04\0\x02\x08\x01\x12\x03\x1e\r\x16\n\x0c\n\x05\x04\
    \0\x02\x08\x03\x12\x03\x1e\x19\x1a\n\n\n\x02\x04\x01\x12\x04!\0%\x01\n\n\
    \n\x03\x04\x01\x01\x12\x03!\x08\x15\n\x0b\n\x04\x04\x01\x02\0\x12\x03\"\
    \x04\x1e\n\r\n\x05\x04\x01\x02\0\x04\x12\x04\"\x04!\x17\n\x0c\n\x05\x04\
    \x01\x02\0\x06\x12\x03\"\x04\x16\n\x0c\n\x05\x04\x01\x02\0\x01\x12\x03\"\
    \x17\x19\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03\"\x1c\x1d\n\x0b\n\x04\x04\
    \x01\x02\x01\x12\x03#\x04\x12\n\r\n\x05\x04\x01\x02\x01\x04\x12\x04#\x04\
    \"\x1e\n\x0c\n\x05\x04\x01\x02\x01\x05\x12\x03#\x04\n\n\x0c\n\x05\x04\
    \x01\x02\x01\x01\x12\x03#\x0b\r\n\x0c\n\x05\x04\x01\x02\x01\x03\x12\x03#\
    \x10\x11\n\x0b\n\x04\x04\x01\x02\x02\x12\x03$\x04\x14\n\r\n\x05\x04\x01\
    \x02\x02\x04\x12\x04$\x04#\x12\n\x0c\n\x05\x04\x01\x02\x02\x05\x12\x03$\
    \x04\n\n\x0c\n\x05\x04\x01\x02\x02\x01\x12\x03$\x0b\x0f\n\x0c\n\x05\x04\
    \x01\x02\x02\x03\x12\x03$\x12\x13\n\n\n\x02\x04\x02\x12\x04'\0)\x01\n\n\
    \n\x03\x04\x02\x01\x12\x03'\x08\x10\n\x0b\n\x04\x04\x02\x02\0\x12\x03(\
    \x04\x14\n\r\n\x05\x04\x02\x02\0\x04\x12\x04(\x04'\x12\n\x0c\n\x05\x04\
    \x02\x02\0\x06\x12\x03(\x04\x0b\n\x0c\n\x05\x04\x02\x02\0\x01\x12\x03(\
    \x0c\x0f\n\x0c\n\x05\x04\x02\x02\0\x03\x12\x03(\x12\x13\n\n\n\x02\x04\
    \x03\x12\x04+\0/\x01\n\n\n\x03\x04\x03\x01\x12\x03+\x08\x0f\n\x0b\n\x04\
    \x04\x03\x02\0\x12\x03,\x04\x19\n\r\n\x05\x04\x03\x02\0\x04\x12\x04,\x04\
    +\x11\n\x0c\n\x05\x04\x03\x02\0\x05\x12\x03,\x04\n\n\x0c\n\x05\x04\x03\
    \x02\0\x01\x12\x03,\x0b\x14\n\x0c\n\x05\x04\x03\x02\0\x03\x12\x03,\x17\
    \x18\n\x0b\n\x04\x04\x03\x02\x01\x12\x03-\x04\x17\n\r\n\x05\x04\x03\x02\
    \x01\x04\x12\x04-\x04,\x19\n\x0c\n\x05\x04\x03\x02\x01\x05\x12\x03-\x04\
    \n\n\x0c\n\x05\x04\x03\x02\x01\x01\x12\x03-\x0b\x12\n\x0c\n\x05\x04\x03\
    \x02\x01\x03\x12\x03-\x15\x16\n\x0b\n\x04\x04\x03\x02\x02\x12\x03.\x04\
    \x19\n\r\n\x05\x04\x03\x02\x02\x04\x12\x04.\x04-\x17\n\x0c\n\x05\x04\x03\
    \x02\x02\x05\x12\x03.\x04\n\n\x0c\n\x05\x04\x03\x02\x02\x01\x12\x03.\x0b\
    \x14\n\x0c\n\x05\x04\x03\x02\x02\x03\x12\x03.\x17\x18\n\n\n\x02\x04\x04\
    \x12\x041\05\x01\n\n\n\x03\x04\x04\x01\x12\x031\x08\x10\n\x0b\n\x04\x04\
    \x04\x02\0\x12\x032\x04\x19\n\r\n\x05\x04\x04\x02\0\x04\x12\x042\x041\
    \x12\n\x0c\n\x05\x04\x04\x02\0\x05\x12\x032\x04\n\n\x0c\n\x05\x04\x04\
    \x02\0\x01\x12\x032\x0b\x14\n\x0c\n\x05\x04\x04\x02\0\x03\x12\x032\x17\
    \x18\n\x0b\n\x04\x04\x04\x02\x01\x12\x033\x04\x17\n\r\n\x05\x04\x04\x02\
    \x01\x04\x12\x043\x042\x19\n\x0c\n\x05\x04\x04\x02\x01\x05\x12\x033\x04\
    \n\n\x0c\n\x05\x04\x04\x02\x01\x01\x12\x033\x0b\x12\n\x0c\n\x05\x04\x04\
    \x02\x01\x03\x12\x033\x15\x16\n\x0b\n\x04\x04\x04\x02\x02\x12\x034\x04\
    \x19\n\r\n\x05\x04\x04\x02\x02\x04\x12\x044\x043\x17\n\x0c\n\x05\x04\x04\
    \x02\x02\x05\x12\x034\x04\n\n\x0c\n\x05\x04\x04\x02\x02\x01\x12\x034\x0b\
    \x14\n\x0c\n\x05\x04\x04\x02\x02\x03\x12\x034\x17\x18\n\n\n\x02\x04\x05\
    \x12\x047\0:\x01\n\n\n\x03\x04\x05\x01\x12\x037\x08\x10\n\x0b\n\x04\x04\
    \x05\x02\0\x12\x038\x04\x19\n\r\n\x05\x04\x05\x02\0\x04\x12\x048\x047\
    \x12\n\x0c\n\x05\x04\x05\x02\0\x05\x12\x038\x04\n\n\x0c\n\x05\x04\x05\
    \x02\0\x01\x12\x038\x0b\x14\n\x0c\n\x05\x04\x05\x02\0\x03\x12\x038\x17\
    \x18\n\x0b\n\x04\x04\x05\x02\x01\x12\x039\x04\x13\n\r\n\x05\x04\x05\x02\
    \x01\x04\x12\x049\x048\x19\n\x0c\n\x05\x04\x05\x02\x01\x05\x12\x039\x04\
    \n\n\x0c\n\x05\x04\x05\x02\x01\x01\x12\x039\x0b\x0e\n\x0c\n\x05\x04\x05\
    \x02\x01\x03\x12\x039\x11\x12\n\n\n\x02\x04\x06\x12\x04<\0?\x01\n\n\n\
    \x03\x04\x06\x01\x12\x03<\x08\x11\n\x0b\n\x04\x04\x06\x02\0\x12\x03=\x04\
    \x15\n\r\n\x05\x04\x06\x02\0\x04\x12\x04=\x04<\x13\n\x0c\n\x05\x04\x06\
    \x02\0\x05\x12\x03=\x04\n\n\x0c\n\x05\x04\x06\x02\0\x01\x12\x03=\x0b\x10\
    \n\x0c\n\x05\x04\x06\x02\0\x03\x12\x03=\x13\x14\n\x0b\n\x04\x04\x06\x02\
    \x01\x12\x03>\x04\x14\n\r\n\x05\x04\x06\x02\x01\x04\x12\x04>\x04=\x15\n\
    \x0c\n\x05\x04\x06\x02\x01\x06\x12\x03>\x04\x0b\n\x0c\n\x05\x04\x06\x02\
    \x01\x01\x12\x03>\x0c\x0f\n\x0c\n\x05\x04\x06\x02\x01\x03\x12\x03>\x12\
    \x13\n\n\n\x02\x04\x07\x12\x04A\0D\x01\n\n\n\x03\x04\x07\x01\x12\x03A\
    \x08\x10\n\x0b\n\x04\x04\x07\x02\0\x12\x03B\x04\x19\n\r\n\x05\x04\x07\
    \x02\0\x04\x12\x04B\x04A\x12\n\x0c\n\x05\x04\x07\x02\0\x05\x12\x03B\x04\
    \n\n\x0c\n\x05\x04\x07\x02\0\x01\x12\x03B\x0b\x14\n\x0c\n\x05\x04\x07\
    \x02\0\x03\x12\x03B\x17\x18\n\x0b\n\x04\x04\x07\x02\x01\x12\x03C\x04\x13\
    \n\r\n\x05\x04\x07\x02\x01\x04\x12\x04C\x04B\x19\n\x0c\n\x05\x04\x07\x02\
    \x01\x05\x12\x03C\x04\n\n\x0c\n\x05\x04\x07\x02\x01\x01\x12\x03C\x0b\x0e\
    \n\x0c\n\x05\x04\x07\x02\x01\x03\x12\x03C\x11\x12\n\n\n\x02\x04\x08\x12\
    \x04F\0I\x01\n\n\n\x03\x04\x08\x01\x12\x03F\x08\x11\n\x0b\n\x04\x04\x08\
    \x02\0\x12\x03G\x04\x15\n\r\n\x05\x04\x08\x02\0\x04\x12\x04G\x04F\x13\n\
    \x0c\n\x05\x04\x08\x02\0\x05\x12\x03G\x04\n\n\x0c\n\x05\x04\x08\x02\0\
    \x01\x12\x03G\x0b\x10\n\x0c\n\x05\x04\x08\x02\0\x03\x12\x03G\x13\x14\n\
    \x0b\n\x04\x04\x08\x02\x01\x12\x03H\x04\x14\n\r\n\x05\x04\x08\x02\x01\
    \x04\x12\x04H\x04G\x15\n\x0c\n\x05\x04\x08\x02\x01\x06\x12\x03H\x04\x0b\
    \n\x0c\n\x05\x04\x08\x02\x01\x01\x12\x03H\x0c\x0f\n\x0c\n\x05\x04\x08\
    \x02\x01\x03\x12\x03H\x12\x13\n\n\n\x02\x04\t\x12\x04K\0N\x01\n\n\n\x03\
    \x04\t\x01\x12\x03K\x08\x12\n\x0b\n\x04\x04\t\x02\0\x12\x03L\x04\x19\n\r\
    \n\x05\x04\t\x02\0\x04\x12\x04L\x04K\x14\n\x0c\n\x05\x04\t\x02\0\x05\x12\
    \x03L\x04\n\n\x0c\n\x05\x04\t\x02\0\x01\x12\x03L\x0b\x14\n\x0c\n\x05\x04\
    \t\x02\0\x03\x12\x03L\x17\x18\n\x0b\n\x04\x04\t\x02\x01\x12\x03M\x04\x13\
    \n\r\n\x05\x04\t\x02\x01\x04\x12\x04M\x04L\x19\n\x0c\n\x05\x04\t\x02\x01\
    \x05\x12\x03M\x04\n\n\x0c\n\x05\x04\t\x02\x01\x01\x12\x03M\x0b\x0e\n\x0c\
    \n\x05\x04\t\x02\x01\x03\x12\x03M\x11\x12\n\n\n\x02\x04\n\x12\x04P\0S\
    \x01\n\n\n\x03\x04\n\x01\x12\x03P\x08\x13\n\x0b\n\x04\x04\n\x02\0\x12\
    \x03Q\x04\x15\n\r\n\x05\x04\n\x02\0\x04\x12\x04Q\x04P\x15\n\x0c\n\x05\
    \x04\n\x02\0\x05\x12\x03Q\x04\n\n\x0c\n\x05\x04\n\x02\0\x01\x12\x03Q\x0b\
    \x10\n\x0c\n\x05\x04\n\x02\0\x03\x12\x03Q\x13\x14\n\x0b\n\x04\x04\n\x02\
    \x01\x12\x03R\x04\x14\n\r\n\x05\x04\n\x02\x01\x04\x12\x04R\x04Q\x15\n\
    \x0c\n\x05\x04\n\x02\x01\x06\x12\x03R\x04\x0b\n\x0c\n\x05\x04\n\x02\x01\
    \x01\x12\x03R\x0c\x0f\n\x0c\n\x05\x04\n\x02\x01\x03\x12\x03R\x12\x13\n\n\
    \n\x02\x04\x0b\x12\x04U\0Y\x01\n\n\n\x03\x04\x0b\x01\x12\x03U\x08\x0e\n\
    \x0b\n\x04\x04\x0b\x02\0\x12\x03V\x04\x19\n\r\n\x05\x04\x0b\x02\0\x04\
    \x12\x04V\x04U\x10\n\x0c\n\x05\x04\x0b\x02\0\x05\x12\x03V\x04\n\n\x0c\n\
    \x05\x04\x0b\x02\0\x01\x12\x03V\x0b\x14\n\x0c\n\x05\x04\x0b\x02\0\x03\
    \x12\x03V\x17\x18\n\x0b\n\x04\x04\x0b\x02\x01\x12\x03W\x04\x13\n\r\n\x05\
    \x04\x0b\x02\x01\x04\x12\x04W\x04V\x19\n\x0c\n\x05\x04\x0b\x02\x01\x05\
    \x12\x03W\x04\n\n\x0c\n\x05\x04\x0b\x02\x01\x01\x12\x03W\x0b\x0e\n\x0c\n\
    \x05\x04\x0b\x02\x01\x03\x12\x03W\x11\x12\n\x0b\n\x04\x04\x0b\x02\x02\
    \x12\x03X\x04\x16\n\r\n\x05\x04\x0b\x02\x02\x04\x12\x04X\x04W\x13\n\x0c\
    \n\x05\x04\x0b\x02\x02\x05\x12\x03X\x04\n\n\x0c\n\x05\x04\x0b\x02\x02\
    \x01\x12\x03X\x0b\x11\n\x0c\n\x05\x04\x0b\x02\x02\x03\x12\x03X\x14\x15\n\
    \n\n\x02\x04\x0c\x12\x04[\0^\x01\n\n\n\x03\x04\x0c\x01\x12\x03[\x08\x0f\
    \n\x0b\n\x04\x04\x0c\x02\0\x12\x03\\\x04\x15\n\r\n\x05\x04\x0c\x02\0\x04\
    \x12\x04\\\x04[\x11\n\x0c\n\x05\x04\x0c\x02\0\x05\x12\x03\\\x04\n\n\x0c\
    \n\x05\x04\x0c\x02\0\x01\x12\x03\\\x0b\x10\n\x0c\n\x05\x04\x0c\x02\0\x03\
    \x12\x03\\\x13\x14\n\x0b\n\x04\x04\x0c\x02\x01\x12\x03]\x04\x14\n\r\n\
    \x05\x04\x0c\x02\x01\x04\x12\x04]\x04\\\x15\n\x0c\n\x05\x04\x0c\x02\x01\
    \x06\x12\x03]\x04\x0b\n\x0c\n\x05\x04\x0c\x02\x01\x01\x12\x03]\x0c\x0f\n\
    \x0c\n\x05\x04\x0c\x02\x01\x03\x12\x03]\x12\x13\n\n\n\x02\x04\r\x12\x04`\
    \0e\x01\n\n\n\x03\x04\r\x01\x12\x03`\x08\x0e\n\x0b\n\x04\x04\r\x02\0\x12\
    \x03a\x04\x19\n\r\n\x05\x04\r\x02\0\x04\x12\x04a\x04`\x10\n\x0c\n\x05\
    \x04\r\x02\0\x05\x12\x03a\x04\n\n\x0c\n\x05\x04\r\x02\0\x01\x12\x03a\x0b\
    \x14\n\x0c\n\x05\x04\r\x02\0\x03\x12\x03a\x17\x18\n\x0b\n\x04\x04\r\x02\
    \x01\x12\x03b\x04\x13\n\r\n\x05\x04\r\x02\x01\x04\x12\x04b\x04a\x19\n\
    \x0c\n\x05\x04\r\x02\x01\x05\x12\x03b\x04\n\n\x0c\n\x05\x04\r\x02\x01\
    \x01\x12\x03b\x0b\x0e\n\x0c\n\x05\x04\r\x02\x01\x03\x12\x03b\x11\x12\n\
    \x0b\n\x04\x04\r\x02\x02\x12\x03c\x04\x16\n\r\n\x05\x04\r\x02\x02\x04\
    \x12\x04c\x04b\x13\n\x0c\n\x05\x04\r\x02\x02\x05\x12\x03c\x04\n\n\x0c\n\
    \x05\x04\r\x02\x02\x01\x12\x03c\x0b\x11\n\x0c\n\x05\x04\r\x02\x02\x03\
    \x12\x03c\x14\x15\n\x0b\n\x04\x04\r\x02\x03\x12\x03d\x04\x16\n\r\n\x05\
    \x04\r\x02\x03\x04\x12\x04d\x04c\x16\n\x0c\n\x05\x04\r\x02\x03\x05\x12\
    \x03d\x04\n\n\x0c\n\x05\x04\r\x02\x03\x01\x12\x03d\x0b\x11\n\x0c\n\x05\
    \x04\r\x02\x03\x03\x12\x03d\x14\x15\n\n\n\x02\x04\x0e\x12\x04g\0j\x01\n\
    \n\n\x03\x04\x0e\x01\x12\x03g\x08\x0f\n\x0b\n\x04\x04\x0e\x02\0\x12\x03h\
    \x04\x15\n\r\n\x05\x04\x0e\x02\0\x04\x12\x04h\x04g\x11\n\x0c\n\x05\x04\
    \x0e\x02\0\x05\x12\x03h\x04\n\n\x0c\n\x05\x04\x0e\x02\0\x01\x12\x03h\x0b\
    \x10\n\x0c\n\x05\x04\x0e\x02\0\x03\x12\x03h\x13\x14\n\x0b\n\x04\x04\x0e\
    \x02\x01\x12\x03i\x04\x14\n\r\n\x05\x04\x0e\x02\x01\x04\x12\x04i\x04h\
    \x15\n\x0c\n\x05\x04\x0e\x02\x01\x06\x12\x03i\x04\x0b\n\x0c\n\x05\x04\
    \x0e\x02\x01\x01\x12\x03i\x0c\x0f\n\x0c\n\x05\x04\x0e\x02\x01\x03\x12\
    \x03i\x12\x13\n\n\n\x02\x04\x0f\x12\x04l\0p\x01\n\n\n\x03\x04\x0f\x01\
    \x12\x03l\x08\x11\n\x0b\n\x04\x04\x0f\x02\0\x12\x03m\x04\x19\n\r\n\x05\
    \x04\x0f\x02\0\x04\x12\x04m\x04l\x13\n\x0c\n\x05\x04\x0f\x02\0\x05\x12\
    \x03m\x04\n\n\x0c\n\x05\x04\x0f\x02\0\x01\x12\x03m\x0b\x14\n\x0c\n\x05\
    \x04\x0f\x02\0\x03\x12\x03m\x17\x18\n\x0b\n\x04\x04\x0f\x02\x01\x12\x03n\
    \x04\x13\n\r\n\x05\x04\x0f\x02\x01\x04\x12\x04n\x04m\x19\n\x0c\n\x05\x04\
    \x0f\x02\x01\x05\x12\x03n\x04\n\n\x0c\n\x05\x04\x0f\x02\x01\x01\x12\x03n\
    \x0b\x0e\n\x0c\n\x05\x04\x0f\x02\x01\x03\x12\x03n\x11\x12\n\x0b\n\x04\
    \x04\x0f\x02\x02\x12\x03o\x04\x16\n\r\n\x05\x04\x0f\x02\x02\x04\x12\x04o\
    \x04n\x13\n\x0c\n\x05\x04\x0f\x02\x02\x05\x12\x03o\x04\n\n\x0c\n\x05\x04\
    \x0f\x02\x02\x01\x12\x03o\x0b\x11\n\x0c\n\x05\x04\x0f\x02\x02\x03\x12\
    \x03o\x14\x15\n\n\n\x02\x04\x10\x12\x04r\0u\x01\n\n\n\x03\x04\x10\x01\
    \x12\x03r\x08\x12\n\x0b\n\x04\x04\x10\x02\0\x12\x03s\x04\x15\n\r\n\x05\
    \x04\x10\x02\0\x04\x12\x04s\x04r\x14\n\x0c\n\x05\x04\x10\x02\0\x05\x12\
    \x03s\x04\n\n\x0c\n\x05\x04\x10\x02\0\x01\x12\x03s\x0b\x10\n\x0c\n\x05\
    \x04\x10\x02\0\x03\x12\x03s\x13\x14\n\x0b\n\x04\x04\x10\x02\x01\x12\x03t\
    \x04\x14\n\r\n\x05\x04\x10\x02\x01\x04\x12\x04t\x04s\x15\n\x0c\n\x05\x04\
    \x10\x02\x01\x06\x12\x03t\x04\x0b\n\x0c\n\x05\x04\x10\x02\x01\x01\x12\
    \x03t\x0c\x0f\n\x0c\n\x05\x04\x10\x02\x01\x03\x12\x03t\x12\x13\n\n\n\x02\
    \x04\x11\x12\x04w\0z\x01\n\n\n\x03\x04\x11\x01\x12\x03w\x08\x11\n\x0b\n\
    \x04\x04\x11\x02\0\x12\x03x\x04\x19\n\r\n\x05\x04\x11\x02\0\x04\x12\x04x\
    \x04w\x13\n\x0c\n\x05\x04\x11\x02\0\x05\x12\x03x\x04\n\n\x0c\n\x05\x04\
    \x11\x02\0\x01\x12\x03x\x0b\x14\n\x0c\n\x05\x04\x11\x02\0\x03\x12\x03x\
    \x17\x18\n\x0b\n\x04\x04\x11\x02\x01\x12\x03y\x04\x13\n\r\n\x05\x04\x11\
    \x02\x01\x04\x12\x04y\x04x\x19\n\x0c\n\x05\x04\x11\x02\x01\x05\x12\x03y\
    \x04\n\n\x0c\n\x05\x04\x11\x02\x01\x01\x12\x03y\x0b\x0e\n\x0c\n\x05\x04\
    \x11\x02\x01\x03\x12\x03y\x11\x12\n\n\n\x02\x04\x12\x12\x04|\0\x7f\x01\n\
    \n\n\x03\x04\x12\x01\x12\x03|\x08\x12\n\x0b\n\x04\x04\x12\x02\0\x12\x03}\
    \x04\x15\n\r\n\x05\x04\x12\x02\0\x04\x12\x04}\x04|\x14\n\x0c\n\x05\x04\
    \x12\x02\0\x05\x12\x03}\x04\n\n\x0c\n\x05\x04\x12\x02\0\x01\x12\x03}\x0b\
    \x10\n\x0c\n\x05\x04\x12\x02\0\x03\x12\x03}\x13\x14\n\x0b\n\x04\x04\x12\
    \x02\x01\x12\x03~\x04\x14\n\r\n\x05\x04\x12\x02\x01\x04\x12\x04~\x04}\
    \x15\n\x0c\n\x05\x04\x12\x02\x01\x06\x12\x03~\x04\x0b\n\x0c\n\x05\x04\
    \x12\x02\x01\x01\x12\x03~\x0c\x0f\n\x0c\n\x05\x04\x12\x02\x01\x03\x12\
    \x03~\x12\x13\n\x0c\n\x02\x04\x13\x12\x06\x81\x01\0\x84\x01\x01\n\x0b\n\
    \x03\x04\x13\x01\x12\x04\x81\x01\x08\x13\n\x0c\n\x04\x04\x13\x02\0\x12\
    \x04\x82\x01\x04\x19\n\x0f\n\x05\x04\x13\x02\0\x04\x12\x06\x82\x01\x04\
    \x81\x01\x15\n\r\n\x05\x04\x13\x02\0\x05\x12\x04\x82\x01\x04\n\n\r\n\x05\
    \x04\x13\x02\0\x01\x12\x04\x82\x01\x0b\x14\n\r\n\x05\x04\x13\x02\0\x03\
    \x12\x04\x82\x01\x17\x18\n\x0c\n\x04\x04\x13\x02\x01\x12\x04\x83\x01\x04\
    \x13\n\x0f\n\x05\x04\x13\x02\x01\x04\x12\x06\x83\x01\x04\x82\x01\x19\n\r\
    \n\x05\x04\x13\x02\x01\x05\x12\x04\x83\x01\x04\n\n\r\n\x05\x04\x13\x02\
    \x01\x01\x12\x04\x83\x01\x0b\x0e\n\r\n\x05\x04\x13\x02\x01\x03\x12\x04\
    \x83\x01\x11\x12\n\x0c\n\x02\x04\x14\x12\x06\x86\x01\0\x89\x01\x01\n\x0b\
    \n\x03\x04\x14\x01\x12\x04\x86\x01\x08\x14\n\x0c\n\x04\x04\x14\x02\0\x12\
    \x04\x87\x01\x04\x15\n\x0f\n\x05\x04\x14\x02\0\x04\x12\x06\x87\x01\x04\
    \x86\x01\x16\n\r\n\x05\x04\x14\x02\0\x05\x12\x04\x87\x01\x04\n\n\r\n\x05\
    \x04\x14\x02\0\x01\x12\x04\x87\x01\x0b\x10\n\r\n\x05\x04\x14\x02\0\x03\
    \x12\x04\x87\x01\x13\x14\n\x0c\n\x04\x04\x14\x02\x01\x12\x04\x88\x01\x04\
    \x14\n\x0f\n\x05\x04\x14\x02\x01\x04\x12\x06\x88\x01\x04\x87\x01\x15\n\r\
    \n\x05\x04\x14\x02\x01\x06\x12\x04\x88\x01\x04\x0b\n\r\n\x05\x04\x14\x02\
    \x01\x01\x12\x04\x88\x01\x0c\x0f\n\r\n\x05\x04\x14\x02\x01\x03\x12\x04\
    \x88\x01\x12\x13\n\x0c\n\x02\x04\x15\x12\x06\x8b\x01\0\x8e\x01\x01\n\x0b\
    \n\x03\x04\x15\x01\x12\x04\x8b\x01\x08\x10\n\x0c\n\x04\x04\x15\x02\0\x12\
    \x04\x8c\x01\x04\x19\n\x0f\n\x05\x04\x15\x02\0\x04\x12\x06\x8c\x01\x04\
    \x8b\x01\x12\n\r\n\x05\x04\x15\x02\0\x05\x12\x04\x8c\x01\x04\n\n\r\n\x05\
    \x04\x15\x02\0\x01\x12\x04\x8c\x01\x0b\x14\n\r\n\x05\x04\x15\x02\0\x03\
    \x12\x04\x8c\x01\x17\x18\n\x0c\n\x04\x04\x15\x02\x01\x12\x04\x8d\x01\x04\
    \x13\n\x0f\n\x05\x04\x15\x02\x01\x04\x12\x06\x8d\x01\x04\x8c\x01\x19\n\r\
    \n\x05\x04\x15\x02\x01\x05\x12\x04\x8d\x01\x04\n\n\r\n\x05\x04\x15\x02\
    \x01\x01\x12\x04\x8d\x01\x0b\x0e\n\r\n\x05\x04\x15\x02\x01\x03\x12\x04\
    \x8d\x01\x11\x12\n\x0c\n\x02\x04\x16\x12\x06\x90\x01\0\x93\x01\x01\n\x0b\
    \n\x03\x04\x16\x01\x12\x04\x90\x01\x08\x11\n\x0c\n\x04\x04\x16\x02\0\x12\
    \x04\x91\x01\x04\x15\n\x0f\n\x05\x04\x16\x02\0\x04\x12\x06\x91\x01\x04\
    \x90\x01\x13\n\r\n\x05\x04\x16\x02\0\x05\x12\x04\x91\x01\x04\n\n\r\n\x05\
    \x04\x16\x02\0\x01\x12\x04\x91\x01\x0b\x10\n\r\n\x05\x04\x16\x02\0\x03\
    \x12\x04\x91\x01\x13\x14\n\x0c\n\x04\x04\x16\x02\x01\x12\x04\x92\x01\x04\
    \x14\n\x0f\n\x05\x04\x16\x02\x01\x04\x12\x06\x92\x01\x04\x91\x01\x15\n\r\
    \n\x05\x04\x16\x02\x01\x06\x12\x04\x92\x01\x04\x0b\n\r\n\x05\x04\x16\x02\
    \x01\x01\x12\x04\x92\x01\x0c\x0f\n\r\n\x05\x04\x16\x02\x01\x03\x12\x04\
    \x92\x01\x12\x13\n\x0c\n\x02\x04\x17\x12\x06\x95\x01\0\x9b\x01\x01\n\x0b\
    \n\x03\x04\x17\x01\x12\x04\x95\x01\x08\x11\n\x0c\n\x04\x04\x17\x02\0\x12\
    \x04\x96\x01\x04\x19\n\x0f\n\x05\x04\x17\x02\0\x04\x12\x06\x96\x01\x04\
    \x95\x01\x13\n\r\n\x05\x04\x17\x02\0\x05\x12\x04\x96\x01\x04\n\n\r\n\x05\
    \x04\x17\x02\0\x01\x12\x04\x96\x01\x0b\x14\n\r\n\x05\x04\x17\x02\0\x03\
    \x12\x04\x96\x01\x17\x18\n\x0c\n\x04\x04\x17\x02\x01\x12\x04\x97\x01\x04\
    \x13\n\x0f\n\x05\x04\x17\x02\x01\x04\x12\x06\x97\x01\x04\x96\x01\x19\n\r\
    \n\x05\x04\x17\x02\x01\x05\x12\x04\x97\x01\x04\n\n\r\n\x05\x04\x17\x02\
    \x01\x01\x12\x04\x97\x01\x0b\x0e\n\r\n\x05\x04\x17\x02\x01\x03\x12\x04\
    \x97\x01\x11\x12\n\x0c\n\x04\x04\x17\x02\x02\x12\x04\x98\x01\x04\x15\n\
    \x0f\n\x05\x04\x17\x02\x02\x04\x12\x06\x98\x01\x04\x97\x01\x13\n\r\n\x05\
    \x04\x17\x02\x02\x05\x12\x04\x98\x01\x04\n\n\r\n\x05\x04\x17\x02\x02\x01\
    \x12\x04\x98\x01\x0b\x10\n\r\n\x05\x04\x17\x02\x02\x03\x12\x04\x98\x01\
    \x13\x14\n\x0c\n\x04\x04\x17\x02\x03\x12\x04\x99\x01\x04\x14\n\x0f\n\x05\
    \x04\x17\x02\x03\x04\x12\x06\x99\x01\x04\x98\x01\x15\n\r\n\x05\x04\x17\
    \x02\x03\x05\x12\x04\x99\x01\x04\n\n\r\n\x05\x04\x17\x02\x03\x01\x12\x04\
    \x99\x01\x0b\x0f\n\r\n\x05\x04\x17\x02\x03\x03\x12\x04\x99\x01\x12\x13\n\
    \x0c\n\x04\x04\x17\x02\x04\x12\x04\x9a\x01\x04\x15\n\x0f\n\x05\x04\x17\
    \x02\x04\x04\x12\x06\x9a\x01\x04\x99\x01\x14\n\r\n\x05\x04\x17\x02\x04\
    \x05\x12\x04\x9a\x01\x04\n\n\r\n\x05\x04\x17\x02\x04\x01\x12\x04\x9a\x01\
    \x0b\x10\n\r\n\x05\x04\x17\x02\x04\x03\x12\x04\x9a\x01\x13\x14\n\x0c\n\
    \x02\x04\x18\x12\x06\x9d\x01\0\xa0\x01\x01\n\x0b\n\x03\x04\x18\x01\x12\
    \x04\x9d\x01\x08\x12\n\x0c\n\x04\x04\x18\x02\0\x12\x04\x9e\x01\x04\x15\n\
    \x0f\n\x05\x04\x18\x02\0\x04\x12\x06\x9e\x01\x04\x9d\x01\x14\n\r\n\x05\
    \x04\x18\x02\0\x05\x12\x04\x9e\x01\x04\n\n\r\n\x05\x04\x18\x02\0\x01\x12\
    \x04\x9e\x01\x0b\x10\n\r\n\x05\x04\x18\x02\0\x03\x12\x04\x9e\x01\x13\x14\
    \n\x0c\n\x04\x04\x18\x02\x01\x12\x04\x9f\x01\x04\x14\n\x0f\n\x05\x04\x18\
    \x02\x01\x04\x12\x06\x9f\x01\x04\x9e\x01\x15\n\r\n\x05\x04\x18\x02\x01\
    \x06\x12\x04\x9f\x01\x04\x0b\n\r\n\x05\x04\x18\x02\x01\x01\x12\x04\x9f\
    \x01\x0c\x0f\n\r\n\x05\x04\x18\x02\x01\x03\x12\x04\x9f\x01\x12\x13\n\x0c\
    \n\x02\x04\x19\x12\x06\xa2\x01\0\xa5\x01\x01\n\x0b\n\x03\x04\x19\x01\x12\
    \x04\xa2\x01\x08\x11\n\x0c\n\x04\x04\x19\x02\0\x12\x04\xa3\x01\x04\x19\n\
    \x0f\n\x05\x04\x19\x02\0\x04\x12\x06\xa3\x01\x04\xa2\x01\x13\n\r\n\x05\
    \x04\x19\x02\0\x05\x12\x04\xa3\x01\x04\n\n\r\n\x05\x04\x19\x02\0\x01\x12\
    \x04\xa3\x01\x0b\x14\n\r\n\x05\x04\x19\x02\0\x03\x12\x04\xa3\x01\x17\x18\
    \n\x0c\n\x04\x04\x19\x02\x01\x12\x04\xa4\x01\x04\x13\n\x0f\n\x05\x04\x19\
    \x02\x01\x04\x12\x06\xa4\x01\x04\xa3\x01\x19\n\r\n\x05\x04\x19\x02\x01\
    \x05\x12\x04\xa4\x01\x04\n\n\r\n\x05\x04\x19\x02\x01\x01\x12\x04\xa4\x01\
    \x0b\x0e\n\r\n\x05\x04\x19\x02\x01\x03\x12\x04\xa4\x01\x11\x12\n\x0c\n\
    \x02\x04\x1a\x12\x06\xa7\x01\0\xaa\x01\x01\n\x0b\n\x03\x04\x1a\x01\x12\
    \x04\xa7\x01\x08\x12\n\x0c\n\x04\x04\x1a\x02\0\x12\x04\xa8\x01\x04\x15\n\
    \x0f\n\x05\x04\x1a\x02\0\x04\x12\x06\xa8\x01\x04\xa7\x01\x14\n\r\n\x05\
    \x04\x1a\x02\0\x05\x12\x04\xa8\x01\x04\n\n\r\n\x05\x04\x1a\x02\0\x01\x12\
    \x04\xa8\x01\x0b\x10\n\r\n\x05\x04\x1a\x02\0\x03\x12\x04\xa8\x01\x13\x14\
    \n\x0c\n\x04\x04\x1a\x02\x01\x12\x04\xa9\x01\x04\x14\n\x0f\n\x05\x04\x1a\
    \x02\x01\x04\x12\x06\xa9\x01\x04\xa8\x01\x15\n\r\n\x05\x04\x1a\x02\x01\
    \x06\x12\x04\xa9\x01\x04\x0b\n\r\n\x05\x04\x1a\x02\x01\x01\x12\x04\xa9\
    \x01\x0c\x0f\n\r\n\x05\x04\x1a\x02\x01\x03\x12\x04\xa9\x01\x12\x13b\x06p\
    roto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
